#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""
import os
import sys
import asyncio
import requests
import json
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from app.core.security import validate_password_strength, hash_password, verify_password
from app.core.pat_validation import validate_scopes, check_scope_permission
from app.core.config import settings

def test_password_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π...")
    
    # –í–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
    valid_passwords = [
        "StrongPassword123!",
        "AnotherValid1@",
        "Test123!@#$%"
    ]
    
    for password in valid_passwords:
        is_valid, error_msg = validate_password_strength(password)
        assert is_valid, f"–ü–∞—Ä–æ–ª—å '{password}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º: {error_msg}"
        print(f"  ‚úÖ {password}")
    
    # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
    invalid_passwords = [
        ("short", "—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"),
        ("nouppercase123!", "–Ω–µ—Ç –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤"),
        ("NOLOWERCASE123!", "–Ω–µ—Ç —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤"),
        ("NoDigits!", "–Ω–µ—Ç —Ü–∏—Ñ—Ä"),
        ("NoSpecial123", "–Ω–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤")
    ]
    
    for password, reason in invalid_passwords:
        is_valid, error_msg = validate_password_strength(password)
        assert not is_valid, f"–ü–∞—Ä–æ–ª—å '{password}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º ({reason})"
        print(f"  ‚ùå {password} - {error_msg}")
    
    print("  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_password_hashing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π —Å pepper"""
    print("üîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π...")
    
    password = "TestPassword123!"
    hash1 = hash_password(password)
    hash2 = hash_password(password)
    
    # –•–µ—à–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ –∏–∑-–∑–∞ —Å–æ–ª–∏
    assert hash1 != hash2, "–•–µ—à–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ –∏–∑-–∑–∞ —Å–æ–ª–∏"
    
    # –û–±–∞ –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    assert verify_password(password, hash1), "–ü–µ—Ä–≤—ã–π —Ö–µ—à –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è"
    assert verify_password(password, hash2), "–í—Ç–æ—Ä–æ–π —Ö–µ—à –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è"
    
    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è
    assert not verify_password("WrongPassword123!", hash1), "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è"
    
    print("  ‚úÖ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_pat_scope_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ scopes –¥–ª—è PAT"""
    print("üé´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ PAT scopes...")
    
    # –í–∞–ª–∏–¥–Ω—ã–µ scopes
    valid_scopes = ["api:read", "rag:write", "chat:admin"]
    validated = validate_scopes(valid_scopes)
    
    assert "api:read" in validated
    assert "rag:write" in validated
    assert "chat:admin" in validated
    assert "chat:read" in validated  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω –∏–∑ chat:admin
    assert "chat:write" in validated  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω –∏–∑ chat:admin
    
    print(f"  ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ scopes: {validated}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    user_scopes = ["api:admin", "rag:read"]
    
    # –î–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö scopes
    assert check_scope_permission(user_scopes, "api:admin")
    assert check_scope_permission(user_scopes, "rag:read")
    
    # –î–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è scopes –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
    assert check_scope_permission(user_scopes, "api:read")
    assert check_scope_permission(user_scopes, "api:write")
    
    # –ù–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö scopes
    assert not check_scope_permission(user_scopes, "chat:read")
    assert not check_scope_permission(user_scopes, "users:admin")
    
    print("  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π scopes —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ scopes
    try:
        validate_scopes(["invalid:scope", "api:read"])
        assert False, "–î–æ–ª–∂–Ω–æ –±—ã–ª–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö scopes"
    except Exception as e:
        print(f"  ‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ scopes –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã: {e}")

def test_rate_limiting():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting"""
    print("‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...")
    
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º rate limiting –¥–ª—è login
    print("  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting –¥–ª—è /api/auth/login...")
    
    for i in range(12):  # –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞
        try:
            response = requests.post(f"{base_url}/api/auth/login", json={
                "login": "testuser",
                "password": "wrongpassword"
            }, timeout=5)
            
            if i < 10:  # –ü–µ—Ä–≤—ã–µ 10 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
                assert response.status_code in [400, 401], f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}: –æ–∂–∏–¥–∞–ª—Å—è 400/401, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
            else:  # –ü–æ—Å–ª–µ 10 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã
                assert response.status_code == 429, f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}: –æ–∂–∏–¥–∞–ª—Å—è 429, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
                print(f"  ‚úÖ Rate limiting —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {i+1}")
                break
        except requests.exceptions.RequestException as e:
            print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            break
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º rate limiting –¥–ª—è password reset
    print("  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting –¥–ª—è /auth/password/forgot...")
    
    for i in range(7):  # –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞
        try:
            response = requests.post(f"{base_url}/auth/password/forgot", json={
                "login_or_email": "test@example.com"
            }, timeout=5)
            
            if i < 5:  # –ü–µ—Ä–≤—ã–µ 5 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
                assert response.status_code == 200, f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}: –æ–∂–∏–¥–∞–ª—Å—è 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
            else:  # –ü–æ—Å–ª–µ 5 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã
                assert response.status_code == 429, f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}: –æ–∂–∏–¥–∞–ª—Å—è 429, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
                print(f"  ‚úÖ Rate limiting —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {i+1}")
                break
        except requests.exceptions.RequestException as e:
            print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            break

def test_cors_configuration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    base_url = "http://localhost:8000"
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å
        response = requests.options(f"{base_url}/api/auth/login", timeout=5)
        
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        assert "access-control-allow-origin" in response.headers, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CORS –∑–∞–≥–æ–ª–æ–≤–æ–∫"
        assert "access-control-allow-methods" in response.headers, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CORS –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Ç–æ–¥–æ–≤"
        
        print("  ‚úÖ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        assert hasattr(settings, 'CORS_ORIGINS'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CORS_ORIGINS –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
        assert hasattr(settings, 'CORS_ENABLED'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CORS_ENABLED –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
        assert hasattr(settings, 'CORS_ALLOW_CREDENTIALS'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CORS_ALLOW_CREDENTIALS –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
        
        print(f"  ‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: origins={settings.CORS_ORIGINS}, enabled={settings.CORS_ENABLED}")
        
    except requests.exceptions.RequestException as e:
        print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

def test_password_reset_security():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ password reset"""
    print("üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ password reset...")
    
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 200 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    test_cases = [
        "nonexistent@example.com",
        "invalid-email",
        "nonexistent_user"
    ]
    
    for test_case in test_cases:
        try:
            response = requests.post(f"{base_url}/auth/password/forgot", json={
                "login_or_email": test_case
            }, timeout=5)
            
            assert response.status_code == 200, f"–î–ª—è '{test_case}' –æ–∂–∏–¥–∞–ª—Å—è 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
            print(f"  ‚úÖ '{test_case}' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200")
            
        except requests.exceptions.RequestException as e:
            print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è '{test_case}': {e}")

def test_sse_heartbeat():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSE heartbeat"""
    print("üíì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSE heartbeat...")
    
    from app.api.sse import sse_heartbeat_response
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    response = sse_heartbeat_response(heartbeat_interval=1)
    
    assert response.media_type == "text/event-stream", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π media type"
    assert "Cache-Control" in response.headers, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Cache-Control –∑–∞–≥–æ–ª–æ–≤–æ–∫"
    assert "Connection" in response.headers, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Connection –∑–∞–≥–æ–ª–æ–≤–æ–∫"
    assert response.headers["Cache-Control"] == "no-cache", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Cache-Control"
    assert response.headers["Connection"] == "keep-alive", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Connection"
    
    print("  ‚úÖ SSE heartbeat —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")

def test_audit_logging():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ audit logging"""
    print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ audit logging...")
    
    from app.services.audit_service import AuditService
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
    assert hasattr(AuditService, 'log_action'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ log_action"
    assert hasattr(AuditService, 'log_user_action'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ log_user_action"
    assert hasattr(AuditService, 'log_token_action'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ log_token_action"
    assert hasattr(AuditService, 'log_auth_action'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ log_auth_action"
    
    print("  ‚úÖ Audit logging –º–µ—Ç–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    print("=" * 60)
    
    try:
        test_password_validation()
        print()
        
        test_password_hashing()
        print()
        
        test_pat_scope_validation()
        print()
        
        test_rate_limiting()
        print()
        
        test_cors_configuration()
        print()
        
        test_password_reset_security()
        print()
        
        test_sse_heartbeat()
        print()
        
        test_audit_logging()
        print()
        
        print("=" * 60)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print("=" * 60)
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
