#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
"""
import os
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, str(Path(__file__).parent.parent))

def demo_embedding_system():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    print("=" * 50)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π
    from app.services.clients import embed_texts
    from app.core.model_registry import get_model_registry
    
    # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π
    print("\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π:")
    registry = get_model_registry()
    models = registry.list_models()
    
    for model in models:
        print(f"  ‚Ä¢ {model.alias}: {model.id}")
        print(f"    - –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {model.dim}")
        print(f"    - –ú–∞–∫—Å. –¥–ª–∏–Ω–∞: {model.max_seq}")
        print(f"    - –°—Ç–∞—Ç—É—Å: {model.health}")
        print(f"    - –û—á–µ—Ä–µ–¥–∏: {list(model.queues.values())}")
    
    # 2. –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
    test_texts = [
        "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.",
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–∫—Å—Ç.",
        "–í–µ–∫—Ç–æ—Ä–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
        "–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.",
        "–°–∏—Å—Ç–µ–º–∞ RAG –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞."
    ]
    
    print(f"\nüìù –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã ({len(test_texts)} —à—Ç.):")
    for i, text in enumerate(test_texts, 1):
        print(f"  {i}. {text[:60]}{'...' if len(text) > 60 else ''}")
    
    # 3. –¢–µ—Å—Ç RT –ø—Ä–æ—Ñ–∏–ª—è (–±—ã—Å—Ç—Ä—ã–π)
    print(f"\n‚ö° –¢–µ—Å—Ç RT –ø—Ä–æ—Ñ–∏–ª—è (–±—ã—Å—Ç—Ä—ã–π):")
    start_time = time.time()
    try:
        vectors_rt = embed_texts(test_texts, profile="rt")
        rt_time = time.time() - start_time
        
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(vectors_rt)} –≤–µ–∫—Ç–æ—Ä–æ–≤")
        print(f"  üìä –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(vectors_rt[0]) if vectors_rt else 0}")
        print(f"  ‚è±Ô∏è  –í—Ä–µ–º—è: {rt_time:.2f}—Å")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–≤–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
        if vectors_rt and vectors_rt[0]:
            first_vector = vectors_rt[0][:5]
            print(f"  üî¢ –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {[round(x, 4) for x in first_vector]}")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ RT –ø—Ä–æ—Ñ–∏–ª—è: {e}")
    
    # 4. –¢–µ—Å—Ç BULK –ø—Ä–æ—Ñ–∏–ª—è (–º–∞—Å—Å–æ–≤—ã–π)
    print(f"\nüì¶ –¢–µ—Å—Ç BULK –ø—Ä–æ—Ñ–∏–ª—è (–º–∞—Å—Å–æ–≤—ã–π):")
    start_time = time.time()
    try:
        vectors_bulk = embed_texts(test_texts, profile="bulk")
        bulk_time = time.time() - start_time
        
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(vectors_bulk)} –≤–µ–∫—Ç–æ—Ä–æ–≤")
        print(f"  üìä –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(vectors_bulk[0]) if vectors_bulk else 0}")
        print(f"  ‚è±Ô∏è  –í—Ä–µ–º—è: {bulk_time:.2f}—Å")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ BULK –ø—Ä–æ—Ñ–∏–ª—è: {e}")
    
    # 5. –¢–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    print(f"\nüéØ –¢–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏:")
    try:
        vectors_model = embed_texts(test_texts[:2], models=["minilm"])
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(vectors_model)} –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ minilm")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏: {e}")
    
    # 6. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print(f"\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    if 'rt_time' in locals() and 'bulk_time' in locals():
        speedup = bulk_time / rt_time if rt_time > 0 else 0
        print(f"  RT –ø—Ä–æ—Ñ–∏–ª—å:  {rt_time:.2f}—Å")
        print(f"  BULK –ø—Ä–æ—Ñ–∏–ª—å: {bulk_time:.2f}—Å")
        print(f"  –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
    
    print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"\nüí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ:")
    print(f"   from app.services.clients import embed_texts")
    print(f"   vectors = embed_texts(['–í–∞—à —Ç–µ–∫—Å—Ç'], profile='rt')")

if __name__ == "__main__":
    try:
        demo_embedding_system()
    except KeyboardInterrupt:
        print(f"\n\n‚èπÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
