version: "3.9"

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${PGUSER:-postgres}
      POSTGRES_PASSWORD: ${PGPASSWORD:-postgres}
      POSTGRES_DB: ${PGDATABASE:-app}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 20
    ports: ["5432:5432"]
    volumes:
      - postgres_data:/var/lib/postgresql/data

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ACCESS_KEY: ${S3_ACCESS_KEY:-minio}
      MINIO_SECRET_KEY: ${S3_SECRET_KEY:-minio123}
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-minio}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-minio123}
    ports: ["9000:9000","9001:9001"]
    volumes:
      - minio_data:/data

  qdrant:
    image: qdrant/qdrant:latest
    ports: ["6333:6333"]
    volumes:
      - qdrant_data:/qdrant/storage

  redis:
    image: redis:7-alpine
    command: ["redis-server","--appendonly","yes"]
    ports: ["6379:6379"]

  rabbitmq:
    image: rabbitmq:3-management
    ports: ["5672:5672","15672:15672"]

  emb:
    build:
      context: .
      dockerfile: docker/emb/Dockerfile
    environment:
      TEST_MODE: ${TEST_MODE:-true}
      PORT: "8001"
      REAL_EMBEDDINGS_URL: ${REAL_EMBEDDINGS_URL:-}
    ports: ["8001:8001"]

  llm:
    build:
      context: .
      dockerfile: docker/llm/Dockerfile
    environment:
      TEST_MODE: ${TEST_MODE:-true}
      PORT: "8002"
      REAL_LLM_URL: ${REAL_LLM_URL:-}
    ports: ["8002:8002"]

  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    environment:
      PORT: "${PORT:-8000}"
      DB_URL: "${DB_URL}"
      REDIS_URL: "${REDIS_URL}"
      QDRANT_URL: "${QDRANT_URL}"
      S3_ENDPOINT: "${S3_ENDPOINT:-http://minio:9000}"
      S3_PUBLIC_ENDPOINT: "${S3_PUBLIC_ENDPOINT:-http://localhost:9000}"
      S3_ACCESS_KEY: "${S3_ACCESS_KEY}"
      S3_SECRET_KEY: "${S3_SECRET_KEY}"
      EMBEDDINGS_URL: "${EMBEDDINGS_URL}"
      LLM_URL: "${LLM_URL}"
      CELERY_BROKER_URL: "amqp://guest:guest@rabbitmq:5672//"
      HEALTH_DEEP: "${HEALTH_DEEP:-0}"
    ports: ["8000:8000"]
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
      qdrant:
        condition: service_started
      emb:
        condition: service_started
      llm:
        condition: service_started

  # Ensure DB schema is created before seeding
  # migrate:
  #   build:
  #     context: .
  #     dockerfile: docker/api/Dockerfile
  #   command: bash -lc "alembic -c alembic.ini upgrade head"
  #   working_dir: /app
  #   environment:
  #     PYTHONPATH: "/app"
  #     DB_URL: "${DB_URL}"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   restart: "no"

  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    environment:
      CELERY_BROKER_URL: "amqp://guest:guest@rabbitmq:5672//"
      CELERY_RESULT_BACKEND: "redis://redis:6379/1"
      DB_URL: "${DB_URL}"
      QDRANT_URL: "${QDRANT_URL}"
      REDIS_URL: "${REDIS_URL}"
      S3_ENDPOINT: "${S3_ENDPOINT}"
      S3_PUBLIC_ENDPOINT: "${S3_PUBLIC_ENDPOINT}"
      S3_ACCESS_KEY: "${S3_ACCESS_KEY}"
      S3_SECRET_KEY: "${S3_SECRET_KEY}"
      EMBEDDINGS_URL: "${EMBEDDINGS_URL}"
      LLM_URL: "${LLM_URL}"
      CELERY_CONCURRENCY: "2"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
      qdrant:
        condition: service_started
      emb:
        condition: service_started
      llm:
        condition: service_started

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      args:
        VITE_API_BASE: ${VITE_API_BASE:-http://localhost:8000/api}
        VITE_USE_MOCKS: ${VITE_USE_MOCKS:-false}
    ports: ["8080:8080"]
    depends_on:
      api:
        condition: service_started

  seed:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    command: python scripts/create_admin_user.py
    environment:
      PYTHONPATH: "/app"
      DB_URL: "${DB_URL}"
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

volumes:
  postgres_data:
  minio_data:
  qdrant_data:
