version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ml_portal
      POSTGRES_USER: ml_portal
      POSTGRES_PASSWORD: ml_portal_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ml_portal"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # VECTOR DATABASE
  # =============================================================================
  
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
    # healthcheck: simplified for dev

  # =============================================================================
  # OBJECT STORAGE
  # =============================================================================
  
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    # healthcheck: simplified for dev

  # =============================================================================
  # MESSAGE QUEUE
  # =============================================================================
  
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # BACKEND API SERVICE
  # =============================================================================
  
  api:
    build:
      context: .
      dockerfile: infra/docker/api/Dockerfile.prod
    ports:
      - "8000:8000"
    volumes:
      - ./apps/api/src/app:/app 
      - ./models:/app/ml_models
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://ml_portal:ml_portal_password@postgres:5432/ml_portal
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_API_KEY=
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672
      - JWT_SECRET=dev-jwt-secret-minimum-256-bits-for-development-use-only
      - ENVIRONMENT=development
      - DEBUG=true
      - IDEMPOTENCY_ENABLED=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Starting uvicorn server...' &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "

  # =============================================================================
  # ML SERVICES (LLM, EMB, WORKER) - Unified
  # =============================================================================
  
  
  # EMB Service
  emb:
    build:
      context: .
      dockerfile: infra/docker/ml-services/Dockerfile.prod
    ports:
      - "8001:8001"
    environment:
      - SERVICE_TYPE=emb
      - EMB_PORT=8001
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_API_KEY=
    volumes:
      - ./apps/emb/src/app:/app/emb
      - ./models:/app/models
    depends_on:
      - minio
      - qdrant

  # LLM Service  
  llm:
    build:
      context: .
      dockerfile: infra/docker/ml-services/Dockerfile.prod
    ports:
      - "8002:8002"
    environment:
      - SERVICE_TYPE=llm
      - LLM_PORT=8002
    volumes:
      - ./apps/llm/src/app:/app/llm
      - ./models:/app/models

  # =============================================================================
  # FRONTEND DEVELOPMENT SERVICE  
  # =============================================================================
  
  frontend:
    image: node:20-alpine
    ports:
      - "5173:5173"
    volumes:
      - ./apps/web:/app
      - frontend_node_modules:/app/node_modules
    working_dir: /app
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8000/api/v1
      - VITE_API_PROXY_TARGET=http://api:8000
      - VITE_PORT=5173
    command: >
      sh -c "
        echo 'Checking dependencies...' &&
        if [ ! -d 'node_modules' ] || [ ! -f 'node_modules/.package-lock.json' ]; then
          echo 'Installing dependencies...' &&
          npm install --legacy-peer-deps
        else
          echo 'Dependencies already installed, skipping...'
        fi &&
        echo 'Starting Vite dev server...' &&
        npm run dev -- --host 0.0.0.0
      "
    depends_on:
      - api

  # Worker Service
  worker:
    build:
      context: .
      dockerfile: infra/docker/ml-services/Dockerfile.prod
    environment:
      - SERVICE_TYPE=worker
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://ml_portal:ml_portal_password@postgres:5432/ml_portal
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_API_KEY=
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672
      - JWT_SECRET=dev-jwt-secret-minimum-256-bits-for-development-use-only
      - ENVIRONMENT=development
      - DEBUG=true
    volumes:
      - ./apps/api/src/app:/app/worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["./entrypoint.sh"]

  # =============================================================================
  # NGINX REVERSE PROXY (Optional)
  # =============================================================================
  
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - ./infra/nginx/dev.conf:/etc/nginx/nginx.conf 
    depends_on:
      - api
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  minio_data:
  qdrant_data:
  rabbitmq_data:
  frontend_node_modules: