#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
"""
import asyncio
import json
import time
import uuid
from typing import Dict, Any
import httpx
import pytest

API_BASE_URL = "http://localhost:8000"

class TestSimpleAPI:
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API"""
    
    @pytest.fixture(autouse=True)
    async def setup(self):
        self.client = httpx.AsyncClient(timeout=30.0)
        self.auth_token = None
        yield
        await self.client.aclose()
    
    async def login(self):
        """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
        if not self.auth_token:
            login_data = {"login": "testuser", "password": "test123"}
            response = await self.client.post(f"{API_BASE_URL}/api/auth/login", json=login_data)
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data["access_token"]
                self.client.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                return True
        return self.auth_token is not None
    
    async def wait_for_condition(self, check_func, timeout: int = 60, interval: int = 2):
        """–ñ–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                if await check_func():
                    return True
            except Exception as e:
                print(f"Condition check failed: {e}")
            await asyncio.sleep(interval)
        return False
    
    async def test_health_endpoints(self):
        """–¢–µ—Å—Ç health endpoints"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health endpoints...")
        
        # 1. API health
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API...")
        response = await self.client.get(f"{API_BASE_URL}/healthz")
        assert response.status_code == 200
        data = response.json()
        assert data.get("ok") == True
        print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # 2. Embedding health
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        response = await self.client.get("http://localhost:8001/healthz")
        assert response.status_code == 200
        data = response.json()
        assert data.get("status") == "ok"
        print("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        # 3. LLM health
        print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM...")
        response = await self.client.get("http://localhost:8002/healthz")
        assert response.status_code == 200
        data = response.json()
        assert data.get("status") == "ok"
        print("‚úÖ LLM —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("üéâ –í—Å–µ health endpoints —Ä–∞–±–æ—Ç–∞—é—Ç!")
    
    async def test_chat_endpoints(self):
        """–¢–µ—Å—Ç chat endpoints"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ chat endpoints...")
        
        # 0. –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
        print("0. –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...")
        login_success = await self.login()
        assert login_success, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"
        print("‚úÖ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞...")
        chat_data = {
            "title": f"Test Chat {uuid.uuid4().hex[:8]}",
            "tags": ["test", "e2e"]
        }
        
        response = await self.client.post(f"{API_BASE_URL}/api/chats", json=chat_data)
        assert response.status_code == 200
        chat = response.json()
        chat_id = chat["chat_id"]
        print(f"‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω: {chat_id}")
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
        print("2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤...")
        response = await self.client.get(f"{API_BASE_URL}/api/chats")
        assert response.status_code == 200
        chats_data = response.json()
        assert len(chats_data["items"]) > 0
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats_data['items'])}")
        
        
        # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        print("4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        message_data = {
            "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "use_rag": False
        }
        
        response = await self.client.post(f"{API_BASE_URL}/api/chats/{chat_id}/messages", json=message_data)
        assert response.status_code == 200
        message = response.json()
        message_id = message["message_id"]
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message_id}")
        
        # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        print("5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        response = await self.client.get(f"{API_BASE_URL}/api/chats/{chat_id}/messages")
        assert response.status_code == 200
        messages = response.json()
        assert len(messages) >= 1
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞
        print("6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞...")
        update_data = {"title": f"Updated Chat {uuid.uuid4().hex[:8]}"}
        response = await self.client.patch(f"{API_BASE_URL}/api/chats/{chat_id}", json=update_data)
        assert response.status_code == 200
        print("‚úÖ –ß–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # 7. –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
        print("7. –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞...")
        response = await self.client.delete(f"{API_BASE_URL}/api/chats/{chat_id}")
        assert response.status_code == 200
        print("‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω")
        
        print("üéâ –í—Å–µ chat endpoints —Ä–∞–±–æ—Ç–∞—é—Ç!")
    
    async def test_rag_endpoints(self):
        """–¢–µ—Å—Ç RAG endpoints"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG endpoints...")
        
        # 0. –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
        print("0. –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...")
        login_success = await self.login()
        assert login_success, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"
        print("‚úÖ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # 1. –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        print("1. –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        response = await self.client.get(f"{API_BASE_URL}/api/rag/")
        assert response.status_code == 200
        documents = response.json()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(documents.get('items', []))} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ endpoint
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ endpoint...")
        response = await self.client.get(f"{API_BASE_URL}/api/rag/")
        assert response.status_code == 200
        print("‚úÖ RAG endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("üéâ –í—Å–µ RAG endpoints —Ä–∞–±–æ—Ç–∞—é—Ç!")
    
    async def test_auth_endpoints(self):
        """–¢–µ—Å—Ç auth endpoints"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ auth endpoints...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ me endpoint (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ me endpoint...")
        response = await self.client.get(f"{API_BASE_URL}/api/auth/me")
        # –ú–æ–∂–µ—Ç –±—ã—Ç—å 401 –∏–ª–∏ 200 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        assert response.status_code in [200, 401]
        print(f"‚úÖ Me endpoint –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status_code}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ login endpoint (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ login endpoint...")
        login_data = {
            "login": "testuser",
            "password": "test123"
        }
        response = await self.client.post(f"{API_BASE_URL}/api/auth/login", json=login_data)
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        assert response.status_code in [200, 400, 401, 422, 500]
        print(f"‚úÖ Login endpoint –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status_code}")
        
        print("üéâ –í—Å–µ auth endpoints —Ä–∞–±–æ—Ç–∞—é—Ç!")
    
    async def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        # 0. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        
        # 1. –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º POST –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, –∞ –Ω–µ GET)
        print("1. –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç...")
        response = await self.client.get(f"{API_BASE_URL}/api/chats/nonexistent")
        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 405 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∞—Ç–æ–≤, —á—Ç–æ —Ç–æ–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert response.status_code in [404, 405]
        print(f"‚úÖ {response.status_code} –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞")
        
        # 2. –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
        print("2. –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç...")
        response = await self.client.get(f"{API_BASE_URL}/api/rag/nonexistent")
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        assert response.status_code in [404, 405, 500]
        print(f"‚úÖ {response.status_code} –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        # 3. –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("3. –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        response = await self.client.post(f"{API_BASE_URL}/api/chats", json={})
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º 401 (–Ω–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏) –∏–ª–∏ 422 (–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        assert response.status_code in [401, 422]
        print(f"‚úÖ {response.status_code} –¥–ª—è –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        print("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    
    async def test_metrics_endpoint(self):
        """–¢–µ—Å—Ç metrics endpoint"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ metrics endpoint...")
        
        response = await self.client.get(f"{API_BASE_URL}/metrics")
        assert response.status_code == 200
        print("‚úÖ Metrics endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("üéâ Metrics endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v", "-s"])
