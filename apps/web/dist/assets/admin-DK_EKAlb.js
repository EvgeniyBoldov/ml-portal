import{i as g}from"./idempotency-C3fxGORY.js";const f="/api";function d(e,t){if(t==null){localStorage.removeItem(e);return}typeof t=="string"?localStorage.setItem(e,t):localStorage.setItem(e,JSON.stringify(t))}function h(e){const t=localStorage.getItem(e);if(t===null)return null;try{return JSON.parse(t)}catch{return t}}function u(e){localStorage.removeItem(e)}function a(){return h("token")}function m(){return h("refresh_token")}async function p(){const e=await fetch(f+"/auth/refresh",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({refresh_token:m()})});if(!e.ok)throw new Error("refresh failed");const t=await e.json();return d("token",t.access_token),t.refresh_token&&d("refresh_token",t.refresh_token),t.access_token}async function r(e,t={}){const y=e.startsWith("http")?e:f+e,i={...t.headers||{}};t.auth!==!1&&a()&&(i.Authorization="Bearer "+a()),t.idempotent&&(i["Idempotency-Key"]=g());const c=()=>fetch(y,{...t,headers:i});let s=await c();if(s.status===401&&a())try{const n=await p();i.Authorization="Bearer "+n,s=await c()}catch{throw u("token"),u("refresh_token"),new Error("Не авторизован")}if(!s.ok){let n="Request failed";try{const o=await s.json();n=o.message||o.detail||JSON.stringify(o)}catch{}throw new Error(n)}return s.json()}const S={async getUsers(e={}){const t=new URLSearchParams;return e.query&&t.set("query",e.query),e.role&&t.set("role",e.role),e.is_active!==void 0&&t.set("is_active",String(e.is_active)),e.limit&&t.set("limit",String(e.limit)),e.cursor&&t.set("cursor",e.cursor),r(`/api/admin/users?${t.toString()}`)},async getUser(e){return r(`/api/admin/users/${e}`)},async createUser(e){return r("/api/admin/users",{method:"POST",body:JSON.stringify(e)})},async updateUser(e,t){return r(`/api/admin/users/${e}`,{method:"PATCH",body:JSON.stringify(t)})},async deleteUser(e){return r(`/api/admin/users/${e}`,{method:"DELETE"})},async resetUserPassword(e,t){return r(`/api/admin/users/${e}/password`,{method:"POST",body:JSON.stringify(t)})},async getUserTokens(e){return r(`/api/admin/users/${e}/tokens`)},async createUserToken(e,t){return r(`/api/admin/users/${e}/tokens`,{method:"POST",body:JSON.stringify(t)})},async revokeToken(e){return r(`/api/admin/tokens/${e}`,{method:"DELETE"})},async getAuditLogs(e={}){const t=new URLSearchParams;return e.actor_user_id&&t.set("actor_user_id",e.actor_user_id),e.action&&t.set("action",e.action),e.object_type&&t.set("object_type",e.object_type),e.start_date&&t.set("start_date",e.start_date),e.end_date&&t.set("end_date",e.end_date),e.limit&&t.set("limit",String(e.limit)),e.cursor&&t.set("cursor",e.cursor),r(`/api/admin/audit-logs?${t.toString()}`)},async getSystemStatus(){return r("/api/admin/system/status")},async requestPasswordReset(e){return r("/auth/password/forgot",{method:"POST",body:JSON.stringify({login_or_email:e})})},async resetPassword(e,t){return r("/auth/password/reset",{method:"POST",body:JSON.stringify({token:e,new_password:t})})}},_=[{scope:"api:read",description:"Read API access"},{scope:"api:write",description:"Write API access"},{scope:"api:admin",description:"Admin API access"},{scope:"rag:read",description:"Read RAG documents"},{scope:"rag:write",description:"Write RAG documents"},{scope:"rag:admin",description:"Admin RAG operations"},{scope:"chat:read",description:"Read chat history"},{scope:"chat:write",description:"Send messages"},{scope:"chat:admin",description:"Admin chat operations"},{scope:"users:read",description:"Read user data"},{scope:"users:write",description:"Write user data"},{scope:"users:admin",description:"Admin user operations"}];export{_ as T,S as a};
