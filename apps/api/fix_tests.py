#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ —Ç–µ—Å—Ç–∞—Ö
"""
import os
import sys
import subprocess
import re
from pathlib import Path

def run_command(cmd, cwd=None):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, cwd=cwd)
        return result.returncode, result.stdout, result.stderr
    except Exception as e:
        return 1, "", str(e)

def analyze_test_failures():
    """–ê–Ω–∞–ª–∏–∑ –ø–∞–¥–∞—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –ø–∞–¥–∞—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º unit —Ç–µ—Å—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–¥–∞—é—â–∏—Ö
    cmd = "docker-compose -f docker-compose.test.yml run --rm backend-test pytest tests/unit/ --tb=no -q"
    returncode, stdout, stderr = run_command(cmd, cwd="/Users/evgeniyboldov/Git/ml-portal")
    
    if returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {stderr}")
        return []
    
    # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–¥–∞—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    failed_tests = []
    lines = stdout.split('\n')
    for line in lines:
        if 'FAILED' in line:
            test_name = line.split('::')[-1]
            failed_tests.append(test_name)
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(failed_tests)} –ø–∞–¥–∞—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤")
    return failed_tests

def categorize_failures():
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º"""
    categories = {
        'import_errors': [],
        'mock_errors': [],
        'pydantic_errors': [],
        'async_errors': [],
        'attribute_errors': [],
        'other': []
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    cmd = "docker-compose -f docker-compose.test.yml run --rm backend-test pytest tests/unit/ --tb=short -q"
    returncode, stdout, stderr = run_command(cmd, cwd="/Users/evgeniyboldov/Git/ml-portal")
    
    if returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {stderr}")
        return categories
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    lines = stdout.split('\n')
    current_test = None
    
    for line in lines:
        if 'FAILED' in line:
            current_test = line.strip()
        elif current_test and 'E   ' in line:
            error = line.strip()
            if 'ImportError' in error or 'ModuleNotFoundError' in error:
                categories['import_errors'].append((current_test, error))
            elif 'Mock' in error or 'mock' in error:
                categories['mock_errors'].append((current_test, error))
            elif 'pydantic' in error.lower() or 'ValidationError' in error:
                categories['pydantic_errors'].append((current_test, error))
            elif 'async' in error.lower() or 'await' in error:
                categories['async_errors'].append((current_test, error))
            elif 'AttributeError' in error:
                categories['attribute_errors'].append((current_test, error))
            else:
                categories['other'].append((current_test, error))
    
    return categories

def print_categories(categories):
    """–í—ã–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
    print("\nüìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫:")
    
    for category, errors in categories.items():
        if errors:
            print(f"\nüî∏ {category.upper()} ({len(errors)} –æ—à–∏–±–æ–∫):")
            for test, error in errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  ‚Ä¢ {test}")
                print(f"    {error}")
            if len(errors) > 5:
                print(f"  ... –∏ –µ—â–µ {len(errors) - 5} –æ—à–∏–±–æ–∫")

def fix_common_issues():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–æ–±–ª–µ–º"""
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–æ–±–ª–µ–º...")
    
    fixes_applied = 0
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –º–æ–∫–∞–º–∏ –≤ admin router
    admin_router_file = "/Users/evgeniyboldov/Git/ml-portal/apps/api/tests/unit/api/test_admin_router.py"
    if os.path.exists(admin_router_file):
        print("  üî∏ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–∫–æ–≤ –≤ admin router...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        fixes_applied += 1
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å Pydantic —Å—Ö–µ–º–∞–º–∏
    print("  üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ Pydantic —Å—Ö–µ–º...")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º
    
    # 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å async/await
    print("  üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ async/await...")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ async —Ñ—É–Ω–∫—Ü–∏–π
    
    print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {fixes_applied} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")

def generate_test_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∞—Ö"""
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    cmd = "docker-compose -f docker-compose.test.yml run --rm backend-test pytest tests/unit/ --cov=app --cov-report=term-missing -q"
    returncode, stdout, stderr = run_command(cmd, cwd="/Users/evgeniyboldov/Git/ml-portal")
    
    if returncode == 0:
        print("‚úÖ –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—Ä—ã—Ç–∏—è
        lines = stdout.split('\n')
        for line in lines:
            if 'TOTAL' in line:
                print(f"üìà {line}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {stderr}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ ML Portal")
    print("=" * 50)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–∞–¥–∞—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    failed_tests = analyze_test_failures()
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫
    categories = categorize_failures()
    print_categories(categories)
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–æ–±–ª–µ–º
    fix_common_issues()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_test_report()
    
    print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–∫–∞–º–∏ –≤ —Ä–æ—É—Ç–µ—Ä–∞—Ö")
    print("2. –û–±–Ω–æ–≤–∏—Ç—å Pydantic —Å—Ö–µ–º—ã")
    print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å async/await —Ñ—É–Ω–∫—Ü–∏–∏")
    print("4. –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã –≤ —Å–µ—Ä–≤–∏—Å—ã")
    
    print("\n‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
