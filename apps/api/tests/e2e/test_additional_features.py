#!/usr/bin/env python3
"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ E2E —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –∑–∞–±—ã—Ç—ã
"""
import asyncio
import json
import time
import uuid
from typing import Dict, Any
import httpx
import pytest

API_BASE_URL = "http://localhost:8000"

class TestAdditionalFeatures:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π"""
    
    @pytest.fixture(autouse=True)
    async def setup(self):
        self.client = httpx.AsyncClient(timeout=30.0)
        yield
        await self.client.aclose()
    
    async def wait_for_condition(self, check_func, timeout: int = 60, interval: int = 2):
        """–ñ–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                if await check_func():
                    return True
            except Exception as e:
                print(f"Condition check failed: {e}")
            await asyncio.sleep(interval)
        return False
    
    async def test_user_authentication(self):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_data = {
            "username": f"test_user_{uuid.uuid4().hex[:8]}",
            "email": f"test_{uuid.uuid4().hex[:8]}@example.com",
            "password": "test_password_123"
        }
        
        response = await self.client.post(f"{API_BASE_URL}/api/auth/register", json=user_data)
        if response.status_code == 201:
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        elif response.status_code == 409:
            print("‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}")
        
        # 2. –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("2. –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        login_data = {
            "username": user_data["username"],
            "password": user_data["password"]
        }
        
        response = await self.client.post(f"{API_BASE_URL}/api/auth/login", json=login_data)
        if response.status_code == 200:
            tokens = response.json()
            assert "access_token" in tokens
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            self.client.headers.update({"Authorization": f"Bearer {tokens['access_token']}"})
        else:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.status_code}")
        
        print("üéâ –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    async def test_chat_search_and_filtering(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç–æ–≤"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
        chat_ids = []
        for i in range(3):
            chat_data = {
                "title": f"Search Test Chat {i}",
                "tags": [f"tag{i}", "search_test"]
            }
            response = await self.client.post(f"{API_BASE_URL}/api/chats", json=chat_data)
            assert response.status_code == 200
            chat_ids.append(response.json()["id"])
        
        # 1. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        print("1. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...")
        response = await self.client.get(f"{API_BASE_URL}/api/chats?search=Search Test")
        assert response.status_code == 200
        chats = response.json()
        assert len(chats) >= 3
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
        
        # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º
        print("2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º...")
        response = await self.client.get(f"{API_BASE_URL}/api/chats?tags=search_test")
        assert response.status_code == 200
        chats = response.json()
        assert len(chats) >= 3
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤ –ø–æ —Ç–µ–≥–∞–º")
        
        # 3. –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        print("3. –ü–∞–≥–∏–Ω–∞—Ü–∏—è...")
        response = await self.client.get(f"{API_BASE_URL}/api/chats?limit=2&offset=0")
        assert response.status_code == 200
        chats = response.json()
        assert len(chats) <= 2
        print(f"‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(chats)} —á–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        
        # –û—á–∏—Å—Ç–∫–∞
        for chat_id in chat_ids:
            await self.client.delete(f"{API_BASE_URL}/api/chats/{chat_id}")
        
        print("üéâ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    async def test_document_metadata(self):
        """–¢–µ—Å—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc_data = {
            "name": f"metadata_test_{uuid.uuid4().hex[:8]}.txt",
            "uploaded_by": "test_user",
            "tags": ["metadata", "test"]
        }
        
        response = await self.client.post(f"{API_BASE_URL}/api/rag/documents", json=doc_data)
        assert response.status_code == 200
        doc = response.json()
        
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
        response = await self.client.get(f"{API_BASE_URL}/api/rag/documents/{doc['id']}")
        assert response.status_code == 200
        metadata = response.json()
        assert metadata["name"] == doc_data["name"]
        assert metadata["uploaded_by"] == doc_data["uploaded_by"]
        print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
        
        # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        print("2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
        update_data = {
            "tags": ["metadata", "test", "updated"]
        }
        response = await self.client.put(f"{API_BASE_URL}/api/rag/documents/{doc['id']}", json=update_data)
        assert response.status_code == 200
        print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        print("3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        response = await self.client.get(f"{API_BASE_URL}/api/rag/documents")
        assert response.status_code == 200
        documents = response.json()
        assert len(documents) >= 1
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –û—á–∏—Å—Ç–∫–∞
        await self.client.delete(f"{API_BASE_URL}/api/rag/documents/{doc['id']}?hard=true")
        
        print("üéâ –¢–µ—Å—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    async def test_chat_export_import(self):
        """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ —á–∞—Ç–æ–≤"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ —á–∞—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        chat_data = {"title": "Export Test Chat"}
        response = await self.client.post(f"{API_BASE_URL}/api/chats", json=chat_data)
        assert response.status_code == 200
        chat = response.json()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for i in range(3):
            message_data = {"content": f"Test message {i}"}
            response = await self.client.post(f"{API_BASE_URL}/api/chats/{chat['id']}/messages", json=message_data)
            assert response.status_code == 200
        
        # 1. –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        print("1. –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON...")
        response = await self.client.get(f"{API_BASE_URL}/api/chats/{chat['id']}/export?format=json")
        assert response.status_code == 200
        export_data = response.json()
        assert "chat" in export_data
        assert "messages" in export_data
        print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # 2. –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT
        print("2. –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT...")
        response = await self.client.get(f"{API_BASE_URL}/api/chats/{chat['id']}/export?format=txt")
        assert response.status_code == 200
        assert len(response.content) > 0
        print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # 3. –≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown
        print("3. –≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown...")
        response = await self.client.get(f"{API_BASE_URL}/api/chats/{chat['id']}/export?format=md")
        assert response.status_code == 200
        assert len(response.content) > 0
        print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –û—á–∏—Å—Ç–∫–∞
        await self.client.delete(f"{API_BASE_URL}/api/chats/{chat['id']}")
        
        print("üéâ –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    async def test_analytics_and_metrics(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫...")
        
        # 1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤
        print("1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤...")
        response = await self.client.get(f"{API_BASE_URL}/api/chats/stats")
        if response.status_code == 200:
            stats = response.json()
            assert "total_chats" in stats
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞")
        else:
            print("‚ö†Ô∏è  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        print("2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        response = await self.client.get(f"{API_BASE_URL}/api/rag/stats")
        if response.status_code == 200:
            stats = response.json()
            assert "total_docs" in stats
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞")
        else:
            print("‚ö†Ô∏è  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # 3. –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        print("3. –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")
        response = await self.client.get(f"{API_BASE_URL}/metrics")
        if response.status_code == 200:
            print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω—ã")
        else:
            print("‚ö†Ô∏è  –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        print("üéâ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    async def test_error_recovery(self):
        """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫...")
        
        # 1. –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ñ–∞–π–ª–∞
        print("1. –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ñ–∞–π–ª–∞...")
        doc_data = {
            "name": "invalid_file.exe",  # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            "uploaded_by": "test_user"
        }
        response = await self.client.post(f"{API_BASE_URL}/api/rag/documents", json=doc_data)
        if response.status_code == 400:
            print("‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        else:
            print("‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        
        # 2. –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º —Ñ–∞–π–ª–æ–º
        print("2. –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º —Ñ–∞–π–ª–æ–º...")
        doc_data = {
            "name": "large_file.txt",
            "uploaded_by": "test_user"
        }
        response = await self.client.post(f"{API_BASE_URL}/api/rag/documents", json=doc_data)
        if response.status_code == 200:
            doc = response.json()
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            large_content = "x" * (100 * 1024 * 1024)  # 100MB
            put_url = doc["put_url"]
            try:
                response = await self.client.put(put_url, content=large_content)
                if response.status_code == 413:
                    print("‚úÖ –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω")
                else:
                    print("‚ö†Ô∏è  –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –ø—Ä–∏–Ω—è—Ç")
            except:
                print("‚úÖ –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ)")
            
            # –û—á–∏—Å—Ç–∫–∞
            await self.client.delete(f"{API_BASE_URL}/api/rag/documents/{doc['id']}?hard=true")
        
        print("üéâ –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    async def test_concurrent_operations(self):
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...")
        tasks = []
        for i in range(5):
            chat_data = {"title": f"Concurrent Chat {i}"}
            task = self.client.post(f"{API_BASE_URL}/api/chats", json=chat_data)
            tasks.append(task)
        
        responses = await asyncio.gather(*tasks, return_exceptions=True)
        success_count = sum(1 for r in responses if isinstance(r, httpx.Response) and r.status_code == 200)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {success_count}/5 —á–∞—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º ID —É—Å–ø–µ—à–Ω—ã—Ö —á–∞—Ç–æ–≤
        chat_ids = []
        for response in responses:
            if isinstance(response, httpx.Response) and response.status_code == 200:
                chat_ids.append(response.json()["id"])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        print("2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...")
        tasks = []
        for chat_id in chat_ids:
            message_data = {"content": f"Concurrent message for {chat_id}"}
            task = self.client.post(f"{API_BASE_URL}/api/chats/{chat_id}/messages", json=message_data)
            tasks.append(task)
        
        responses = await asyncio.gather(*tasks, return_exceptions=True)
        success_count = sum(1 for r in responses if isinstance(r, httpx.Response) and r.status_code == 200)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
        
        # –û—á–∏—Å—Ç–∫–∞
        for chat_id in chat_ids:
            await self.client.delete(f"{API_BASE_URL}/api/chats/{chat_id}")
        
        print("üéâ –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    async def test_data_consistency(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç
        chat_data = {"title": "Consistency Test Chat"}
        response = await self.client.post(f"{API_BASE_URL}/api/chats", json=chat_data)
        assert response.status_code == 200
        chat = response.json()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_data = {"content": "Consistency test message"}
        response = await self.client.post(f"{API_BASE_URL}/api/chats/{chat['id']}/messages", json=message_data)
        assert response.status_code == 200
        message = response.json()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —Å–ø–∏—Å–∫–µ
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è...")
        response = await self.client.get(f"{API_BASE_URL}/api/chats/{chat['id']}/messages")
        assert response.status_code == 200
        messages = response.json()
        assert len(messages) >= 1
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —Å–ø–∏—Å–∫–µ")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –æ–±–Ω–æ–≤–∏–ª—Å—è
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞...")
        response = await self.client.get(f"{API_BASE_URL}/api/chats/{chat['id']}")
        assert response.status_code == 200
        updated_chat = response.json()
        assert updated_chat["id"] == chat["id"]
        print("‚úÖ –ß–∞—Ç –æ–±–Ω–æ–≤–∏–ª—Å—è")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å
        print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
        response = await self.client.get(f"{API_BASE_URL}/api/chats/{chat['id']}/messages/{message['id']}")
        assert response.status_code == 200
        retrieved_message = response.json()
        assert retrieved_message["content"] == message_data["content"]
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å")
        
        # –û—á–∏—Å—Ç–∫–∞
        await self.client.delete(f"{API_BASE_URL}/api/chats/{chat['id']}")
        
        print("üéâ –¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
