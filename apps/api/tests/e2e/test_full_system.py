#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ E2E —Ç–µ—Å—Ç—ã –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã ML Portal
"""
import asyncio
import json
import time
import uuid
from pathlib import Path
from typing import Dict, Any, List
import httpx
import pytest

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
API_BASE_URL = "http://localhost:8000"
TEST_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –≤–µ—Å—å —Ç–µ—Å—Ç

class TestFullSystem:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    @pytest.fixture(autouse=True)
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.client = httpx.AsyncClient(timeout=30.0)
        self.test_data = {
            "chat_id": None,
            "document_id": None,
            "analysis_id": None,
            "tags": []
        }
        yield
        await self.client.aclose()
    
    async def wait_for_condition(self, check_func, timeout: int = 60, interval: int = 2):
        """–ñ–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                if await check_func():
                    return True
            except Exception as e:
                print(f"Condition check failed: {e}")
            await asyncio.sleep(interval)
        return False
    
    async def test_chat_workflow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow —á–∞—Ç–∞"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow —á–∞—Ç–∞...")
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞...")
        chat_data = {
            "title": f"Test Chat {uuid.uuid4().hex[:8]}",
            "tags": ["test", "e2e"]
        }
        
        response = await self.client.post(f"{API_BASE_URL}/api/chats", json=chat_data)
        assert response.status_code == 200
        chat = response.json()
        self.test_data["chat_id"] = chat["id"]
        print(f"‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω: {chat['id']}")
        
        # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        print("2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        message_data = {
            "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ.",
            "use_rag": False
        }
        
        response = await self.client.post(
            f"{API_BASE_URL}/api/chats/{chat['id']}/messages", 
            json=message_data
        )
        assert response.status_code == 200
        message = response.json()
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message['id']}")
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–∏–º)
        print("3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
        response = await self.client.get(f"{API_BASE_URL}/api/chats/{chat['id']}/messages/{message['id']}/stream")
        assert response.status_code == 200
        
        # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–∏–º
        content = ""
        async for line in response.aiter_lines():
            if line.startswith("data: "):
                data = line[6:]
                if data.strip() == "[DONE]":
                    break
                try:
                    chunk = json.loads(data)
                    if "choices" in chunk and len(chunk["choices"]) > 0:
                        delta = chunk["choices"][0].get("delta", {})
                        chunk_content = delta.get("content", "")
                        if chunk_content:
                            content += chunk_content
                except:
                    continue
        
        assert len(content) > 0
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞
        print("4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞...")
        tag_data = {"tag": "important"}
        response = await self.client.post(f"{API_BASE_URL}/api/chats/{chat['id']}/tags", json=tag_data)
        assert response.status_code == 200
        print("‚úÖ –¢–µ–≥ –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # 5. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        print("5. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞...")
        new_title = f"Renamed Chat {uuid.uuid4().hex[:8]}"
        update_data = {"title": new_title}
        response = await self.client.put(f"{API_BASE_URL}/api/chats/{chat['id']}", json=update_data)
        assert response.status_code == 200
        print("‚úÖ –ß–∞—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω")
        
        # 6. –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
        print("6. –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞...")
        response = await self.client.delete(f"{API_BASE_URL}/api/chats/{chat['id']}")
        assert response.status_code == 200
        print("‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω")
        
        print("üéâ –¢–µ—Å—Ç —á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    async def test_rag_workflow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow RAG"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow RAG...")
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        doc_data = {
            "name": f"test_document_{uuid.uuid4().hex[:8]}.txt",
            "uploaded_by": "test_user"
        }
        
        response = await self.client.post(f"{API_BASE_URL}/api/rag/documents", json=doc_data)
        assert response.status_code == 200
        doc = response.json()
        self.test_data["document_id"] = doc["id"]
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {doc['id']}")
        
        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        print("2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...")
        test_content = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã. –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞."
        put_url = doc["put_url"]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ presigned URL
        upload_response = await self.client.put(put_url, content=test_content)
        assert upload_response.status_code == 200
        print("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # 3. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print("3. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        async def check_processing():
            response = await self.client.get(f"{API_BASE_URL}/api/rag/documents/{doc['id']}/progress")
            if response.status_code == 200:
                progress = response.json()
                return progress.get("status") == "processed"
            return False
        
        processing_ok = await self.wait_for_condition(check_processing, timeout=120)
        assert processing_ok, "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç"
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
        print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤...")
        response = await self.client.get(f"{API_BASE_URL}/api/rag/documents/{doc['id']}/progress")
        assert response.status_code == 200
        progress = response.json()
        assert progress["chunks_total"] > 0
        assert progress["vectors_total"] > 0
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {progress['chunks_total']} —á–∞–Ω–∫–æ–≤, {progress['vectors_total']} –≤–µ–∫—Ç–æ—Ä–æ–≤")
        
        # 5. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        print("5. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞...")
        response = await self.client.get(f"{API_BASE_URL}/api/rag/documents/{doc['id']}/download?type=original")
        assert response.status_code == 200
        assert len(response.content) > 0
        print("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª —Å–∫–∞—á–∞–Ω")
        
        # 6. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞
        print("6. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞...")
        response = await self.client.get(f"{API_BASE_URL}/api/rag/documents/{doc['id']}/download?type=canonical")
        assert response.status_code == 200
        print("‚úÖ –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω")
        
        # 7. –ü–æ–∏—Å–∫ –≤ RAG
        print("7. –ü–æ–∏—Å–∫ –≤ RAG...")
        search_data = {
            "query": "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            "top_k": 5
        }
        response = await self.client.post(f"{API_BASE_URL}/api/rag/search", json=search_data)
        assert response.status_code == 200
        results = response.json()
        assert len(results["results"]) > 0
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results['results'])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # 8. –ü–µ—Ä–µ—Å—á–µ—Ç –Ω–∞ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        print("8. –ü–µ—Ä–µ—Å—á–µ—Ç –Ω–∞ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å...")
        response = await self.client.post(f"{API_BASE_URL}/api/rag/documents/{doc['id']}/reprocess")
        if response.status_code == 200:
            print("‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–ø—É—â–µ–Ω")
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
            reprocess_ok = await self.wait_for_condition(check_processing, timeout=120)
            assert reprocess_ok, "–ü–µ—Ä–µ—Å—á–µ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç"
            print("‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        else:
            print("‚ö†Ô∏è  –ü–µ—Ä–µ—Å—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # 9. –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        print("9. –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        response = await self.client.delete(f"{API_BASE_URL}/api/rag/documents/{doc['id']}")
        assert response.status_code == 200
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        # 10. –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        print("10. –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        response = await self.client.delete(f"{API_BASE_URL}/api/rag/documents/{doc['id']}?hard=true")
        assert response.status_code == 200
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
        
        print("üéâ –¢–µ—Å—Ç RAG –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    async def test_analysis_workflow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow –∞–Ω–∞–ª–∏–∑–∞"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow –∞–Ω–∞–ª–∏–∑–∞...")
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        doc_data = {
            "name": f"analysis_document_{uuid.uuid4().hex[:8]}.txt",
            "uploaded_by": "test_user"
        }
        
        response = await self.client.post(f"{API_BASE_URL}/api/rag/documents", json=doc_data)
        assert response.status_code == 200
        doc = response.json()
        
        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        print("2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...")
        test_content = "–≠—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö."
        put_url = doc["put_url"]
        
        upload_response = await self.client.put(put_url, content=test_content)
        assert upload_response.status_code == 200
        print("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # 3. –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
        print("3. –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")
        analysis_data = {
            "document_id": doc["id"],
            "analysis_type": "summary"
        }
        
        response = await self.client.post(f"{API_BASE_URL}/api/analyze", json=analysis_data)
        assert response.status_code == 200
        analysis = response.json()
        self.test_data["analysis_id"] = analysis["id"]
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω: {analysis['id']}")
        
        # 4. –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print("4. –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        async def check_analysis():
            response = await self.client.get(f"{API_BASE_URL}/api/analyze/{analysis['id']}")
            if response.status_code == 200:
                result = response.json()
                return result.get("status") in ["completed", "failed"]
            return False
        
        analysis_ok = await self.wait_for_condition(check_analysis, timeout=120)
        assert analysis_ok, "–ê–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç"
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print("5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        response = await self.client.get(f"{API_BASE_URL}/api/analyze/{analysis['id']}")
        assert response.status_code == 200
        result = response.json()
        assert result["status"] == "completed"
        assert "result" in result
        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω")
        
        # 6. –û—á–∏—Å—Ç–∫–∞
        print("6. –û—á–∏—Å—Ç–∫–∞...")
        await self.client.delete(f"{API_BASE_URL}/api/rag/documents/{doc['id']}?hard=true")
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        print("üéâ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    async def test_system_health(self):
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API...")
        response = await self.client.get(f"{API_BASE_URL}/healthz")
        assert response.status_code == 200
        print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        try:
            response = await self.client.get("http://localhost:8001/healthz")
            if response.status_code == 200:
                print("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
            else:
                print("‚ö†Ô∏è  –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        except:
            print("‚ö†Ô∏è  –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM
        print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM...")
        try:
            response = await self.client.get("http://localhost:8002/healthz")
            if response.status_code == 200:
                print("‚úÖ LLM —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("‚ö†Ô∏è  LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except:
            print("‚ö†Ô∏è  LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("üéâ –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    async def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        # 1. –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
        print("1. –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç...")
        response = await self.client.get(f"{API_BASE_URL}/api/chats/nonexistent")
        assert response.status_code == 404
        print("‚úÖ 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞")
        
        # 2. –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
        print("2. –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç...")
        response = await self.client.get(f"{API_BASE_URL}/api/rag/documents/nonexistent")
        assert response.status_code == 404
        print("‚úÖ 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        # 3. –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("3. –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        response = await self.client.post(f"{API_BASE_URL}/api/chats", json={})
        assert response.status_code == 422
        print("‚úÖ 422 –¥–ª—è –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        print("üéâ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
class TestAdditionalFeatures:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π"""
    
    @pytest.fixture(autouse=True)
    async def setup(self):
        self.client = httpx.AsyncClient(timeout=30.0)
        yield
        await self.client.aclose()
    
    async def test_chat_with_rag(self):
        """–¢–µ—Å—Ç —á–∞—Ç–∞ —Å RAG"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —Å RAG...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc_data = {
            "name": f"rag_test_{uuid.uuid4().hex[:8]}.txt",
            "uploaded_by": "test_user"
        }
        response = await self.client.post(f"{API_BASE_URL}/api/rag/documents", json=doc_data)
        assert response.status_code == 200
        doc = response.json()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        test_content = "–≠—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏. –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö."
        put_url = doc["put_url"]
        await self.client.put(put_url, content=test_content)
        
        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        async def check_processing():
            response = await self.client.get(f"{API_BASE_URL}/api/rag/documents/{doc['id']}/progress")
            if response.status_code == 200:
                progress = response.json()
                return progress.get("status") == "processed"
            return False
        
        await self.wait_for_condition(check_processing, timeout=120)
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç
        chat_data = {"title": f"RAG Chat {uuid.uuid4().hex[:8]}"}
        response = await self.client.post(f"{API_BASE_URL}/api/chats", json=chat_data)
        assert response.status_code == 200
        chat = response.json()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å RAG
        message_data = {
            "content": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏",
            "use_rag": True
        }
        response = await self.client.post(f"{API_BASE_URL}/api/chats/{chat['id']}/messages", json=message_data)
        assert response.status_code == 200
        
        # –û—á–∏—Å—Ç–∫–∞
        await self.client.delete(f"{API_BASE_URL}/api/chats/{chat['id']}")
        await self.client.delete(f"{API_BASE_URL}/api/rag/documents/{doc['id']}?hard=true")
        
        print("‚úÖ –ß–∞—Ç —Å RAG —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    async def test_batch_operations(self):
        """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤
        chat_ids = []
        for i in range(3):
            chat_data = {"title": f"Batch Chat {i}"}
            response = await self.client.post(f"{API_BASE_URL}/api/chats", json=chat_data)
            assert response.status_code == 200
            chat_ids.append(response.json()["id"])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        response = await self.client.get(f"{API_BASE_URL}/api/chats")
        assert response.status_code == 200
        chats = response.json()
        assert len(chats) >= 3
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —á–∞—Ç—ã
        for chat_id in chat_ids:
            await self.client.delete(f"{API_BASE_URL}/api/chats/{chat_id}")
        
        print("‚úÖ –ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    async def test_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç
        chat_data = {"title": "Performance Test"}
        response = await self.client.post(f"{API_BASE_URL}/api/chats", json=chat_data)
        assert response.status_code == 200
        chat = response.json()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        for i in range(5):
            message_data = {"content": f"–°–æ–æ–±—â–µ–Ω–∏–µ {i}"}
            response = await self.client.post(f"{API_BASE_URL}/api/chats/{chat['id']}/messages", json=message_data)
            assert response.status_code == 200
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚úÖ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        assert duration < 30, "–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ"
        
        # –û—á–∏—Å—Ç–∫–∞
        await self.client.delete(f"{API_BASE_URL}/api/chats/{chat['id']}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v", "-s"])
