### .env
VITE_API_BASE=/api
VITE_USE_MOCKS=true

### .env.example
VITE_API_BASE=/api

### README.md
# Frontend (pure)

Чистый фронт на React + Vite + TS. Без Docker и без обратного прокси в этой директории.

## Быстрый старт (локально)
```bash
npm i
cp .env.example .env
# при необходимости поменяйте VITE_API_BASE (по умолчанию /api)
npm run dev
```

## Структура
- `src/theme.css` — глобальная тема (CSS-переменные).
- `src/shared/ui/*` — переиспользуемые компоненты (CSS Modules).
- `src/shared/api/*` — слой API (вынесен из компонентов).
- `src/shared/lib/*` — утилиты (SSE, хранилище).
- `src/app/routes/*` — страницы/лейауты (Login, GPTGate, GPTLayout, Chat).
- `src/app/store/*` — zustand store (auth).

## Примечания
- Авторизация: login → me, хранение токенов в localStorage, авто-refresh.
- Чат: создание чата, отправка сообщения со стримом (SSE/чанки).
- Idempotency-Key: для POST сообщений (генерируется через crypto.randomUUID()).

## Моки (без бэкенда)
Включить моки: в `.env` установите `VITE_USE_MOCKS=true` (по умолчанию уже так в `.env.example`).  
Моки реализованы внутри `src/mocks/mockFetch.ts` и перехватываются на уровне `apiFetch()`.
Поддержано:
- `POST /auth/login` (`admin` / `admin`), `GET /auth/me`, `POST /auth/refresh`, `POST /auth/logout`
- `POST /chats` создание чата
- `POST /chats/:id/messages` со стримингом **SSE** (моковый ответ печатается по символам)
- `GET /chats/:id/messages`, `GET /chats`
- `GET /rag`, `POST /rag/upload`, `POST /rag/search`

Чтобы перейти на реальный бэкенд — поставьте `VITE_USE_MOCKS=false` и настройте `VITE_API_BASE`.


⚙️ При запуске с `VITE_USE_MOCKS=true` глобально переопределяется `window.fetch` (см. `src/mocks/enableMocks.ts`), чтобы ни один запрос не улетел в реальный бэкенд.

## Навигация по чатам
В разделе **Chat** добавлена боковая панель со списком чатов и кнопкой **New**.
- Маршруты: `/gpt/chat/:chatId`
- Создание нового чата автоматически перенаправляет к нему.
- Сообщения чата подгружаются при переключении.

### index.html
<!doctype html>
<html lang="en" data-theme="light">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Почемучка</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

### package-lock.json
{
  "name": "llm-rag-frontend",
  "version": "0.1.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "llm-rag-frontend",
      "version": "0.1.0",
      "dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-router-dom": "^6.26.2",
        "zustand": "^4.5.2"
      },
      "devDependencies": {
        "@types/node": "^20.14.12",
        "@types/react": "^18.2.66",
        "@types/react-dom": "^18.2.22",
        "@vitejs/plugin-react": "^4.3.1",
        "typescript": "^5.6.2",
        "vite": "^5.4.3",
        "vite-tsconfig-paths": "^4.3.2"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.4.tgz",
      "integrity": "sha512-YsmSKC29MJwf0gF8Rjjrg5LQCmyh+j/nD8/eP7f+BeoQTKYqs9RoWbjGOdy0+1Ekr68RJZMUOPVQaQisnIo4Rw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.4.tgz",
      "integrity": "sha512-2BCOP7TN8M+gVDj7/ht3hsaO/B/n5oDbiAyyvnRlNOs+u1o+JWNYTQrmpuNp1/Wq2gcFrI01JAW+paEKDMx/CA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.28.3",
        "@babel/helpers": "^7.28.4",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.4",
        "@babel/types": "^7.28.4",
        "@jridgewell/remapping": "^2.3.5",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.3.tgz",
      "integrity": "sha512-3lSpxGgvnmZznmBkCRnVREPUFJv2wrv9iAoFDvADJc0ypmdOxdUtcLeBgBJ6zE0PMeTKnxeQzyk0xTBq4Ep7zw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.3",
        "@babel/types": "^7.28.2",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.28.3.tgz",
      "integrity": "sha512-gytXUbs8k2sXS9PnQptz5o0QnpLL51SwASIORY6XaBKF88nsOT0Zw9szLqlSGQDP/4TljBAD5y98p2U1fqkdsw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.28.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.4.tgz",
      "integrity": "sha512-HFN59MmQXGHVyYadKLVumYsA9dBFun/ldYxipEjzA4196jpLZd8UjEEBLkbEkvfYreDqJhZxYAWFPtrfhNpj4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.4.tgz",
      "integrity": "sha512-yZbBqeM6TkpP9du/I2pUZnJsRMGGvOuIrhjzC1AwHwW+6he4mni6Bp/m8ijn0iOuZuPI2BfkCoSRunpyjnrQKg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.4"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.4.tgz",
      "integrity": "sha512-YEzuboP2qvQavAcjgQNVgsvHIDv6ZpwXvcvjmyySP2DIMuByS/6ioU5G9pYrWHM6T2YDfc7xga9iNzYOs12CFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.4.tgz",
      "integrity": "sha512-bkFqkLhh3pMBUQQkpVgWDWq/lqzc2678eUyDlTBhRqhCHFguYYGM0Efga7tYk4TogG/3x0EEl66/OQ+WGbWB/Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
      "integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/remapping": {
      "version": "2.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/remapping/-/remapping-2.3.5.tgz",
      "integrity": "sha512-LI9u/+laYG4Ds1TDKSJW2YPrIlcVYOwi2fUC6xB43lueCjgxV4lffOCZCtYFiH6TNOX+tQKXx97T4IKHbhyHEQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.30",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.30.tgz",
      "integrity": "sha512-GQ7Nw5G2lTu/BtHTKfXhKHok2WGetd4XYcVKGx00SjAk8GMwgJM3zr6zORiPGuOE+/vkc90KtTosSSvaCjKb2Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@remix-run/router": {
      "version": "1.23.0",
      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.23.0.tgz",
      "integrity": "sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.27",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.27.tgz",
      "integrity": "sha512-+d0F4MKMCbeVUJwG96uQ4SgAznZNSq93I3V+9NHA4OpvqG8mRCpGdKmK8l/dl02h2CCDHwW2FqilnTyDcAnqjA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.50.0.tgz",
      "integrity": "sha512-lVgpeQyy4fWN5QYebtW4buT/4kn4p4IJ+kDNB4uYNT5b8c8DLJDg6titg20NIg7E8RWwdWZORW6vUFfrLyG3KQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.50.0.tgz",
      "integrity": "sha512-2O73dR4Dc9bp+wSYhviP6sDziurB5/HCym7xILKifWdE9UsOe2FtNcM+I4xZjKrfLJnq5UR8k9riB87gauiQtw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.50.0.tgz",
      "integrity": "sha512-vwSXQN8T4sKf1RHr1F0s98Pf8UPz7pS6P3LG9NSmuw0TVh7EmaE+5Ny7hJOZ0M2yuTctEsHHRTMi2wuHkdS6Hg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.50.0.tgz",
      "integrity": "sha512-cQp/WG8HE7BCGyFVuzUg0FNmupxC+EPZEwWu2FCGGw5WDT1o2/YlENbm5e9SMvfDFR6FRhVCBePLqj0o8MN7Vw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.50.0.tgz",
      "integrity": "sha512-UR1uTJFU/p801DvvBbtDD7z9mQL8J80xB0bR7DqW7UGQHRm/OaKzp4is7sQSdbt2pjjSS72eAtRh43hNduTnnQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.50.0.tgz",
      "integrity": "sha512-G/DKyS6PK0dD0+VEzH/6n/hWDNPDZSMBmqsElWnCRGrYOb2jC0VSupp7UAHHQ4+QILwkxSMaYIbQ72dktp8pKA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.50.0.tgz",
      "integrity": "sha512-u72Mzc6jyJwKjJbZZcIYmd9bumJu7KNmHYdue43vT1rXPm2rITwmPWF0mmPzLm9/vJWxIRbao/jrQmxTO0Sm9w==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.50.0.tgz",
      "integrity": "sha512-S4UefYdV0tnynDJV1mdkNawp0E5Qm2MtSs330IyHgaccOFrwqsvgigUD29uT+B/70PDY1eQ3t40+xf6wIvXJyg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.50.0.tgz",
      "integrity": "sha512-1EhkSvUQXJsIhk4msxP5nNAUWoB4MFDHhtc4gAYvnqoHlaL9V3F37pNHabndawsfy/Tp7BPiy/aSa6XBYbaD1g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.50.0.tgz",
      "integrity": "sha512-EtBDIZuDtVg75xIPIK1l5vCXNNCIRM0OBPUG+tbApDuJAy9mKago6QxX+tfMzbCI6tXEhMuZuN1+CU8iDW+0UQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.50.0.tgz",
      "integrity": "sha512-BGYSwJdMP0hT5CCmljuSNx7+k+0upweM2M4YGfFBjnFSZMHOLYR0gEEj/dxyYJ6Zc6AiSeaBY8dWOa11GF/ppQ==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-ppc64-gnu": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.50.0.tgz",
      "integrity": "sha512-I1gSMzkVe1KzAxKAroCJL30hA4DqSi+wGc5gviD0y3IL/VkvcnAqwBf4RHXHyvH66YVHxpKO8ojrgc4SrWAnLg==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.50.0.tgz",
      "integrity": "sha512-bSbWlY3jZo7molh4tc5dKfeSxkqnf48UsLqYbUhnkdnfgZjgufLS/NTA8PcP/dnvct5CCdNkABJ56CbclMRYCA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.50.0.tgz",
      "integrity": "sha512-LSXSGumSURzEQLT2e4sFqFOv3LWZsEF8FK7AAv9zHZNDdMnUPYH3t8ZlaeYYZyTXnsob3htwTKeWtBIkPV27iQ==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.50.0.tgz",
      "integrity": "sha512-CxRKyakfDrsLXiCyucVfVWVoaPA4oFSpPpDwlMcDFQvrv3XY6KEzMtMZrA+e/goC8xxp2WSOxHQubP8fPmmjOQ==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.50.0.tgz",
      "integrity": "sha512-8PrJJA7/VU8ToHVEPu14FzuSAqVKyo5gg/J8xUerMbyNkWkO9j2ExBho/68RnJsMGNJq4zH114iAttgm7BZVkA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.50.0.tgz",
      "integrity": "sha512-SkE6YQp+CzpyOrbw7Oc4MgXFvTw2UIBElvAvLCo230pyxOLmYwRPwZ/L5lBe/VW/qT1ZgND9wJfOsdy0XptRvw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-openharmony-arm64": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-openharmony-arm64/-/rollup-openharmony-arm64-4.50.0.tgz",
      "integrity": "sha512-PZkNLPfvXeIOgJWA804zjSFH7fARBBCpCXxgkGDRjjAhRLOR8o0IGS01ykh5GYfod4c2yiiREuDM8iZ+pVsT+Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openharmony"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.50.0.tgz",
      "integrity": "sha512-q7cIIdFvWQoaCbLDUyUc8YfR3Jh2xx3unO8Dn6/TTogKjfwrax9SyfmGGK6cQhKtjePI7jRfd7iRYcxYs93esg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.50.0.tgz",
      "integrity": "sha512-XzNOVg/YnDOmFdDKcxxK410PrcbcqZkBmz+0FicpW5jtjKQxcW1BZJEQOF0NJa6JO7CZhett8GEtRN/wYLYJuw==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.50.0.tgz",
      "integrity": "sha512-xMmiWRR8sp72Zqwjgtf3QbZfF1wdh8X2ABu3EaozvZcyHJeU0r+XAnXdKgs4cCAp6ORoYoCygipYP1mjmbjrsg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.28.0.tgz",
      "integrity": "sha512-8PvcXf70gTDZBgt9ptxJ8elBeBjcLOAcOtoO/mPJjtji1+CdGbHgm77om1GrsPxsiE+uXIpNSK64UYaIwQXd4Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.2"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "20.19.13",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.19.13.tgz",
      "integrity": "sha512-yCAeZl7a0DxgNVteXFHt9+uyFbqXGy/ShC4BlcHkoE0AfGXYv/BUiplV72DjMYXHDBXFjhvr6DD1NiRVfB4j8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.15",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.15.tgz",
      "integrity": "sha512-F6bEyamV9jKGAFBEmlQnesRPGOQqS2+Uwi0Em15xenOxHaf2hv6L8YCVn3rPdPJOiJfPiCnLIRyvwVaqMY3MIw==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "18.3.24",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.24.tgz",
      "integrity": "sha512-0dLEBsA1kI3OezMBF8nSsb7Nk19ZnsyE1LLhB8r27KbgU5H4pvuqZLdtE+aUkJVoXgTVuA+iLIwmZ0TuK4tx6A==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "@types/prop-types": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "18.3.7",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.7.tgz",
      "integrity": "sha512-MEe3UeoENYVFXzoXEWsvcpg6ZvlrFNlOQ7EOsvhI3CfAXwzPfO8Qwuxd40nepsYKqyyVQnTdEfv68q91yLcKrQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^18.0.0"
      }
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.7.0.tgz",
      "integrity": "sha512-gUu9hwfWvvEDBBmgtAowQCojwZmJ5mcLn3aufeCsitijs3+f2NsrPtlAWIR6OPiqljl96GVCUbLe0HyqIpVaoA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.28.0",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.27",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.4",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.4.tgz",
      "integrity": "sha512-4jYpcjabC606xJ3kw2QwGEZKX0Aw7sgQdZCvIK9dhVSPh76BKo+C+btT1RRofH7B+8iNpEbgGNVWiLki5q93yg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001737",
        "electron-to-chromium": "^1.5.211",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001741",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001741.tgz",
      "integrity": "sha512-QGUGitqsc8ARjLdgAfxETDhRbJ0REsP6O3I96TAth/mVjh2cYzN2u+3AzPP3aVSm2FehEItaJw1xd+IGBXWeSw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.214",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.214.tgz",
      "integrity": "sha512-TpvUNdha+X3ybfU78NoQatKvQEm1oq3lf2QbnmCEdw+Bd9RuIAY+hJTvq1avzHM0f7EJfnH3vbCnbzKzisc/9Q==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/esbuild": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.21.5",
        "@esbuild/android-arm": "0.21.5",
        "@esbuild/android-arm64": "0.21.5",
        "@esbuild/android-x64": "0.21.5",
        "@esbuild/darwin-arm64": "0.21.5",
        "@esbuild/darwin-x64": "0.21.5",
        "@esbuild/freebsd-arm64": "0.21.5",
        "@esbuild/freebsd-x64": "0.21.5",
        "@esbuild/linux-arm": "0.21.5",
        "@esbuild/linux-arm64": "0.21.5",
        "@esbuild/linux-ia32": "0.21.5",
        "@esbuild/linux-loong64": "0.21.5",
        "@esbuild/linux-mips64el": "0.21.5",
        "@esbuild/linux-ppc64": "0.21.5",
        "@esbuild/linux-riscv64": "0.21.5",
        "@esbuild/linux-s390x": "0.21.5",
        "@esbuild/linux-x64": "0.21.5",
        "@esbuild/netbsd-x64": "0.21.5",
        "@esbuild/openbsd-x64": "0.21.5",
        "@esbuild/sunos-x64": "0.21.5",
        "@esbuild/win32-arm64": "0.21.5",
        "@esbuild/win32-ia32": "0.21.5",
        "@esbuild/win32-x64": "0.21.5"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/globrex": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/globrex/-/globrex-0.1.2.tgz",
      "integrity": "sha512-uHJgbwAMwNFf5mLst7IWLNg14x1CkeqglJb/K3doi4dw6q2IvAAmM/Y81kevy83wP+Sst+nutFTYOGg3d1lsxg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.20",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.20.tgz",
      "integrity": "sha512-7gK6zSXEH6neM212JgfYFXe+GmZQM+fia5SsusuBIUgnPheLFBmIPhtFoAQRj8/7wASYQnbDlHPVwY0BefoFgA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.30.1.tgz",
      "integrity": "sha512-X1m21aEmxGXqENEPG3T6u0Th7g0aS4ZmoNynhbs+Cn+q+QGTLt+d5IQ2bHAXKzKcxGJjxACpVbnYQSCRcfxHlQ==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8"
      }
    },
    "node_modules/react-router-dom": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.30.1.tgz",
      "integrity": "sha512-llKsgOkZdbPU1Eg3zK8lCn+sjD9wMRZZPuzmdWWX5SUs8OFkN5HnFVC0u5KMeMaC9aoancFI/KoLuKPqN+hxHw==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0",
        "react-router": "6.30.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8",
        "react-dom": ">=16.8"
      }
    },
    "node_modules/rollup": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.50.0.tgz",
      "integrity": "sha512-/Zl4D8zPifNmyGzJS+3kVoyXeDeT/GrsJM94sACNg9RtUE0hrHa1bNPtRSrfHTMH5HjRzce6K7rlTh3Khiw+pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.50.0",
        "@rollup/rollup-android-arm64": "4.50.0",
        "@rollup/rollup-darwin-arm64": "4.50.0",
        "@rollup/rollup-darwin-x64": "4.50.0",
        "@rollup/rollup-freebsd-arm64": "4.50.0",
        "@rollup/rollup-freebsd-x64": "4.50.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.50.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.50.0",
        "@rollup/rollup-linux-arm64-gnu": "4.50.0",
        "@rollup/rollup-linux-arm64-musl": "4.50.0",
        "@rollup/rollup-linux-loongarch64-gnu": "4.50.0",
        "@rollup/rollup-linux-ppc64-gnu": "4.50.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.50.0",
        "@rollup/rollup-linux-riscv64-musl": "4.50.0",
        "@rollup/rollup-linux-s390x-gnu": "4.50.0",
        "@rollup/rollup-linux-x64-gnu": "4.50.0",
        "@rollup/rollup-linux-x64-musl": "4.50.0",
        "@rollup/rollup-openharmony-arm64": "4.50.0",
        "@rollup/rollup-win32-arm64-msvc": "4.50.0",
        "@rollup/rollup-win32-ia32-msvc": "4.50.0",
        "@rollup/rollup-win32-x64-msvc": "4.50.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/tsconfck": {
      "version": "3.1.6",
      "resolved": "https://registry.npmjs.org/tsconfck/-/tsconfck-3.1.6.tgz",
      "integrity": "sha512-ks6Vjr/jEw0P1gmOVwutM3B7fWxoWBL2KRDb1JfqGVawBmO5UsvmWOQFGHBPl5yxYz4eERr19E6L7NMv+Fej4w==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "tsconfck": "bin/tsconfck.js"
      },
      "engines": {
        "node": "^18 || >=20"
      },
      "peerDependencies": {
        "typescript": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/typescript": {
      "version": "5.9.2",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.2.tgz",
      "integrity": "sha512-CWBzXQrc/qOkhidw1OzBTQuYRbfyxDXJMVJ1XNwUHGROVmuaeiEm3OslpZ1RV96d7SKKjZKrSJu3+t/xlw3R9A==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/undici-types": {
      "version": "6.21.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/use-sync-external-store": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/use-sync-external-store/-/use-sync-external-store-1.5.0.tgz",
      "integrity": "sha512-Rb46I4cGGVBmjamjphe8L/UnvJD+uPPtTkNvX5mZgqdbavhI4EbgIWJiIHXJ8bc/i9EQGPRh4DwEURJ552Do0A==",
      "license": "MIT",
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/vite": {
      "version": "5.4.19",
      "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.19.tgz",
      "integrity": "sha512-qO3aKv3HoQC8QKiNSTuUM1l9o/XX3+c+VTgLHbJWHZGeTPVAg2XwazI9UWzoxjIJCGCV2zU60uqMzjeLZuULqA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.21.3",
        "postcss": "^8.4.43",
        "rollup": "^4.20.0"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || >=20.0.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/vite-tsconfig-paths": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/vite-tsconfig-paths/-/vite-tsconfig-paths-4.3.2.tgz",
      "integrity": "sha512-0Vd/a6po6Q+86rPlntHye7F31zA2URZMbH8M3saAZ/xR9QoGN/L21bxEGfXdWmFdNkqPpRdxFT7nmNe12e9/uA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.1.1",
        "globrex": "^0.1.2",
        "tsconfck": "^3.0.3"
      },
      "peerDependencies": {
        "vite": "*"
      },
      "peerDependenciesMeta": {
        "vite": {
          "optional": true
        }
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/zustand": {
      "version": "4.5.7",
      "resolved": "https://registry.npmjs.org/zustand/-/zustand-4.5.7.tgz",
      "integrity": "sha512-CHOUy7mu3lbD6o6LJLfllpjkzhHXSBlX8B9+qPddUsIfeF5S/UZ5q0kmCsnRqT1UHFQZchNFDDzMbQsuesHWlw==",
      "license": "MIT",
      "dependencies": {
        "use-sync-external-store": "^1.2.2"
      },
      "engines": {
        "node": ">=12.7.0"
      },
      "peerDependencies": {
        "@types/react": ">=16.8",
        "immer": ">=9.0.6",
        "react": ">=16.8"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "immer": {
          "optional": true
        },
        "react": {
          "optional": true
        }
      }
    }
  }
}

### package.json
{
  "name": "llm-rag-frontend",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.26.2",
    "zustand": "^4.5.2"
  },
  "devDependencies": {
    "@types/react": "^18.2.66",
    "@types/react-dom": "^18.2.22",
    "typescript": "^5.6.2",
    "vite": "^5.4.3",
    "@vitejs/plugin-react": "^4.3.1",
    "vite-tsconfig-paths": "^4.3.2",
    "@types/node": "^20.14.12"
  }
}
### src/app/MockBadge.tsx
import React from 'react'
const USE_MOCKS = import.meta.env.VITE_USE_MOCKS === 'true'
export default function MockBadge() {
  if (!USE_MOCKS) return null
  const style: React.CSSProperties = {
    position: 'fixed', bottom: 12, right: 12, padding: '6px 10px',
    background: 'rgba(79,124,255,0.15)', border: '1px solid rgba(79,124,255,0.35)',
    borderRadius: 10, fontSize: 12, color: 'var(--text)', zIndex: 9999
  }
  return <div style={style}>Mocks ON</div>
}

### src/app/router.tsx
import React, { Suspense, lazy } from 'react'
import { createBrowserRouter, RouterProvider } from 'react-router-dom'

const GPTGate = lazy(() => import('./routes/GPTGate'))
const Login = lazy(() => import('./routes/Login'))
const GPTLayout = lazy(() => import('./routes/gpt/GPTLayout'))
const ChatPage = lazy(() => import('./routes/gpt/ChatPage'))
const AnalyzePage = lazy(() => import('./routes/gpt/AnalyzePage'))
const RagPage = lazy(() => import('./routes/gpt/RagPage'))
const NotFound = lazy(() => import('./routes/NotFound'))

const withSuspense = (el: React.ReactNode) => <Suspense fallback={<div />}>{el}</Suspense>

const router = createBrowserRouter([
  { path: '/login', element: withSuspense(<Login />) },
  {
    path: '/gpt',
    element: withSuspense(<GPTGate>{withSuspense(<GPTLayout />)}</GPTGate>),
    children: [
      { path: 'chat', element: withSuspense(<ChatPage />) },
      { path: 'chat/:chatId', element: withSuspense(<ChatPage />) },
      { path: 'analyze', element: withSuspense(<AnalyzePage />) },
      { path: 'rag', element: withSuspense(<RagPage />) }
    ]
  },
  { path: '*', element: withSuspense(<NotFound />) }
])

export default function AppRouter() {
  return <RouterProvider router={router} />
}

### src/app/routes/GPTGate.tsx
import React, { useEffect, useState } from 'react'
import { useAuth } from '@app/store/auth'
import { useNavigate } from 'react-router-dom'

export default function GPTGate({ children }: { children: React.ReactNode }) {
  const { user, fetchMe } = useAuth()
  const [checked, setChecked] = useState(false)
  const nav = useNavigate()

  useEffect(() => {
    (async () => {
      try { await fetchMe() } finally { setChecked(true) }
    })()
  }, [])

  useEffect(() => {
    if (checked && !user) nav('/login')
  }, [checked, user])

  if (!checked) return null
  if (!user) return null
  return <>{children}</>
}

### src/app/routes/Login.module.css
.wrap { min-height: 100vh; display: grid; place-items: center; padding: 24px; }
.card { width: 100%; max-width: 420px; }
.error { color: var(--danger); font-size: 14px; }

### src/app/routes/Login.tsx
import React, { useState } from 'react'
import { useAuth } from '@app/store/auth'
import { useNavigate } from 'react-router-dom'
import Button from '@shared/ui/Button'
import Input from '@shared/ui/Input'
import Card from '@shared/ui/Card'
import styles from './Login.module.css'

export default function Login() {
  const nav = useNavigate()
  const { login, loading } = useAuth()
  const [form, setForm] = useState({ login: '', password: '' })
  const [error, setError] = useState<string | null>(null)

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault()
    setError(null)
    try {
      await login(form.login, form.password)
      nav('/gpt/chat')
    } catch (e: any) {
      setError(e.message || 'Ошибка входа')
    }
  }
  return (
    <div className={styles.wrap}>
      <Card className={styles.card}>
        <h1>Войти</h1>
        <form className="stack" onSubmit={onSubmit}>
          <label>Логин</label>
          <Input placeholder="user" value={form.login} onChange={e=>setForm(f=>({ ...f, login:e.target.value }))} />
          <label>Пароль</label>
          <Input type="password" placeholder="••••••••" value={form.password} onChange={e=>setForm(f=>({ ...f, password:e.target.value }))} />
          {error && <div className={styles.error}>{error}</div>}
          <Button type="submit" disabled={loading}>{loading ? '…' : 'Войти'}</Button>
        </form>
      </Card>
    </div>
  )
}

### src/app/routes/NotFound.tsx
import React from 'react'
import { Link } from 'react-router-dom'
import Card from '@shared/ui/Card'

export default function NotFound() {
  return (
    <div style={{display:'grid', placeItems:'center', minHeight:'60vh', padding:24}}>
      <Card>
        <h2>Страница не найдена</h2>
        <p>Мы не нашли такую страницу. Перейти в <Link to="/gpt/chat">чат</Link> или <Link to="/login">войти</Link>.</p>
      </Card>
    </div>
  )
}

### src/app/routes/gpt/Analyze.tsx
import React from 'react'
import Card from '@shared/ui/Card'

export default function Analyze() {
  return (
    <Card>
      <h2>Analyze</h2>
      <p>Здесь будет экран «анализ документа» (загрузка файла/URL, статус, результат).</p>
    </Card>
  )
}

### src/app/routes/gpt/AnalyzePage.module.css
.wrap { display: grid; gap: 12px; }
.card { display: grid; gap: 10px; }
.header { display: grid; grid-template-columns: 1fr auto; align-items: center; gap: 12px; }
.title { font-weight: 700; letter-spacing: .2px; }
.controls { display: inline-flex; gap: 8px; align-items: center; }
.search { width: 260px; }
.tableWrap { overflow: auto; margin-top: -6px; }
.clickable { cursor: pointer; user-select: none; display: inline-flex; gap: 6px; align-items: center; }
.more { padding: 8px; display: flex; justify-content: center; }
### src/app/routes/gpt/AnalyzePage.tsx
import React, { useEffect, useMemo, useState } from 'react'
import Card from '@shared/ui/Card'
import Input from '@shared/ui/Input'
import Button from '@shared/ui/Button'
import Badge from '@shared/ui/Badge'
import Modal from '@shared/ui/Modal'
import Popover from '@shared/ui/Popover'
import { FilterIcon } from '@shared/ui/Icon'
import Select from '@shared/ui/Select'
import FilePicker from '@shared/ui/FilePicker'
import * as analyze from '@shared/api/analyze'
import styles from './AnalyzePage.module.css'

type Task = { id: string; source?: string; status: string; result?: string; created_at?: string }
type ColKey = keyof Pick<Task, 'source'|'status'|'result'|'created_at'>

export default function AnalyzePage() {
  const [items, setItems] = useState<Task[]>([])
  const [busy, setBusy] = useState(false)

  const [q, setQ] = useState('')
  const [filters, setFilters] = useState<Partial<Record<ColKey, string>>>({})
  const [pop, setPop] = useState<{ open: boolean, col?: ColKey, anchor?: {x:number,y:number} }>({ open: false })

  const [openAdd, setOpenAdd] = useState(false)
  const [file, setFile] = useState<File | null>(null)

  async function refresh() {
    const res = await analyze.listAnalyze()
    setItems(res.items || [])
  }

  // Мягкий пуллинг (экспоненциальный backoff)
  useEffect(() => {
    let cancelled = false
    let delay = 1500
    const tick = async () => {
      while (!cancelled) {
        try { await refresh() } catch {}
        await new Promise(r => setTimeout(r, delay))
        delay = Math.min(delay * 2, 10000)
      }
    }
    tick()
    return () => { cancelled = true }
  }, [])

  const rows = useMemo(() => {
    return (items||[]).filter(t => {
      const text = ((t.source||'') + ' ' + (t.result||'') + ' ' + (t.created_at||'') + ' ' + t.status).toLowerCase()
      if (q.trim() && !text.includes(q.toLowerCase())) return false
      if (filters.source && !(t.source||'').toLowerCase().includes((filters.source||'').toLowerCase())) return false
      if (filters.status && t.status !== filters.status) return false
      if (filters.result && !(t.result||'').toLowerCase().includes((filters.result||'').toLowerCase())) return false
      if (filters.created_at && !(t.created_at||'').toLowerCase().includes((filters.created_at||'').toLowerCase())) return false
      return true
    })
  }, [items, q, filters])

  function openFilter(col: ColKey, el: HTMLElement) {
    const r = el.getBoundingClientRect()
    setPop({ open: true, col, anchor: { x: r.left, y: r.bottom + 6 } })
  }
  function clearAll() { setFilters({}); setPop({ open:false }) }

  async function doUpload() {
    if (!file) return
    setBusy(true)
    try {
      await analyze.createAnalyze({ file })
      setOpenAdd(false)
      setFile(null)
      await refresh()
    } finally { setBusy(false) }
  }

  const hasAnyFilter = Object.values(filters).some(Boolean)

  return (
    <div className={styles.wrap}>
      <Card className={styles.card}>
        <div className={styles.header}>
          <div className={styles.title}>Анализ документов — задачи</div>
          <div className={styles.controls}>
            <Input className={styles.search} placeholder="Поиск…" value={q} onChange={e=>setQ(e.target.value)} />
            {hasAnyFilter && <Badge onClick={clearAll}>Сбросить фильтры</Badge>}
            <Button onClick={()=>setOpenAdd(true)}>Добавить</Button>
          </div>
        </div>

        <div className={styles.tableWrap}>
          <table className="table">
            <thead>
              <tr>
                <th>Источник <button className="icon" onClick={(e)=>openFilter('source', e.currentTarget)}><FilterIcon/></button></th>
                <th>Статус <button className="icon" onClick={(e)=>openFilter('status', e.currentTarget)}><FilterIcon/></button></th>
                <th>Результат <button className="icon" onClick={(e)=>openFilter('result', e.currentTarget)}><FilterIcon/></button></th>
                <th>Создано <button className="icon" onClick={(e)=>openFilter('created_at', e.currentTarget)}><FilterIcon/></button></th>
              </tr>
            </thead>
            <tbody>
              {rows.map((t) => (
                <tr key={t.id}>
                  <td className="muted">{t.source || '—'}</td>
                  <td><Badge tone={t.status==='done'?'success':t.status==='error'?'danger':t.status==='processing'?'warn':'neutral'}>{t.status}</Badge></td>
                  <td style={{maxWidth:480, whiteSpace:'nowrap', textOverflow:'ellipsis', overflow:'hidden'}}>{t.result || '—'}</td>
                  <td className="muted">{t.created_at || '—'}</td>
                </tr>
              ))}
              {rows.length === 0 && <tr><td colSpan={4} className="muted">Нет записей</td></tr>}
            </tbody>
          </table>
        </div>
      </Card>

      <Modal open={openAdd} onClose={()=>setOpenAdd(false)} title="Новый анализ"
        footer={<><Button variant="ghost" onClick={()=>setOpenAdd(false)}>Отмена</Button><Button onClick={doUpload} disabled={busy || !file}>Запустить</Button></>}>
        <FilePicker onChange={f=>setFile(f)} />
      </Modal>

      <Popover open={pop.open} onClose={()=>setPop({open:false})} anchor={pop.anchor}>
        <div className="stack" style={{minWidth: 260}}>
          {pop.col === 'status' ? (
            <Select value={filters.status || ''} onChange={v=>setFilters(f=>({ ...f, status: (v||'') || undefined }))} options={[
              { value: '', label: 'Любой' },
              { value: 'queued', label: 'queued' },
              { value: 'processing', label: 'processing' },
              { value: 'done', label: 'done' },
              { value: 'error', label: 'error' },
            ]} />
          ) : (
            <Input
              autoFocus
              placeholder="содержит…"
              value={(filters[pop.col as ColKey] || '') as string}
              onChange={e=>{
                const val = e.target.value
                const col = pop.col as ColKey
                setFilters(f=>({ ...f, [col]: (val || '').trim() || undefined }))
              }}
            />
          )}
          <div style={{display:'flex', gap:8, justifyContent:'space-between'}}>
            <Button size="sm" variant="ghost" onClick={()=>{ const col = pop.col as ColKey; setFilters(f=>({ ...f, [col]: undefined })); }}>Очистить</Button>
            <Button size="sm" onClick={()=>setPop({open:false})}>Применить</Button>
          </div>
        </div>
      </Popover>
    </div>
  )
}

### src/app/routes/gpt/Chat.module.css
.wrap { height: 100%; display: grid; }
.panel {
  display: grid;
  grid-template-rows: 1fr auto;
  gap: 10px;
  padding: 12px;
  background: var(--chat-panel-bg, var(--panel-alt, #f4f6ff));
  border: 1px solid var(--chat-panel-border, rgba(0,0,0,0.08));
  border-radius: var(--radius);
  margin-top: 0; /* выравнивание с карточкой списка чатов */
}
.messages { overflow: auto; padding: 4px; }
.empty { color: var(--muted); text-align: center; padding: 24px; }
.user { background: rgba(79,124,255,0.12); border: 1px solid rgba(79,124,255,0.25); padding: 10px 12px; border-radius: 12px; margin: 8px 0 8px auto; max-width: 75%; }
.assistant { background: rgba(0,0,0,0.04); border: 1px solid rgba(0,0,0,0.08); padding: 10px 12px; border-radius: 12px; margin: 8px auto 8px 0; max-width: 75%; white-space: pre-wrap; }
.typing { opacity: .6; }

.composer {
  display: grid;
  grid-template-columns: 1fr max-content;
  gap: 10px;
  align-items: stretch;
  min-height: 120px;
  max-height: clamp(160px, 32vh, 40dvh);
}
.inputArea { grid-column: 1 / 2; display: flex; }
.inputArea textarea {
  display: block;
  width: 100%;
  min-height: 80px;
  resize: none;
  overflow: auto;
  box-sizing: border-box;
}
.controls { grid-column: 2 / 3; width: max-content; display: grid; grid-template-rows: 1fr auto; height: 100%; }
.actionsBottom { margin-top: auto; display: grid; gap: 8px; justify-items: start; align-content: end; }
.ragToggle { display: inline-flex; align-items: center; gap: 8px; font-size: 13px; color: var(--muted); }
.ragToggle input { transform: translateY(1px); }

### src/app/routes/gpt/Chat.tsx
import React, { useEffect, useRef, useState } from 'react'
import styles from './Chat.module.css'
import Card from '@shared/ui/Card'
import Button from '@shared/ui/Button'
import Textarea from '@shared/ui/Textarea'
import * as chats from '@shared/api/chats'
import { useNavigate, useParams } from 'react-router-dom'

type Msg = { role: 'user' | 'assistant'; content: string }

export default function Chat() {
  const { chatId } = useParams()
  const nav = useNavigate()
  const [currentId, setCurrentId] = useState<string | null>(null)
  const [items, setItems] = useState<Msg[]>([])
  const [text, setText] = useState('')
  const [busy, setBusy] = useState(false)
  const [useRag, setUseRag] = useState(false)
  const boxRef = useRef<HTMLDivElement>(null)
  const taRef = useRef<HTMLTextAreaElement>(null)

  useEffect(() => {
    (async () => {
      if (!chatId) {
        const { chat_id } = await chats.createChat()
        nav(`/gpt/chat/${chat_id}`, { replace: true })
        return
      }
      setCurrentId(chatId)
    })()
  }, [chatId])

  useEffect(() => {
    (async () => {
      if (!currentId) return
      try {
        const res = await chats.listMessages(currentId, { limit: 100 })
        const msgs = (res.items || []) as Msg[]
        setItems(msgs)
      } catch { setItems([]) }
    })()
  }, [currentId])

  useEffect(() => {
    boxRef.current?.scrollTo({ top: boxRef.current.scrollHeight, behavior: 'smooth' })
  }, [items.length])

  async function onSend() {
    const content = text.trim()
    if (!content || !currentId) return
    setBusy(true)
    setItems(prev => [...prev, { role: 'user', content }])
    setText('')
    try {
      const res = await chats.chat(currentId, { content, use_rag: useRag })
      setItems(prev => [...prev, { role: 'assistant', content: res.answer || '' }])
    } finally { setBusy(false) }
    taRef.current?.focus()
  }

  return (
    <div className={styles.wrap}>
      <Card className={styles.panel} ref={boxRef as any}>
        <div className={styles.messages}>
          {items.length === 0 && <div className={styles.empty}>Пока нет сообщений</div>}
          {items.map((m, i) => (
            <div key={i} className={m.role === 'user' ? styles.user : styles.assistant}>{m.content}</div>
          ))}
          {busy && <div className={[styles.assistant, styles.typing].join(' ')}>…</div>}
        </div>
        <div className={styles.composer}>
          <div className={styles.inputArea}>
            <Textarea
              ref={taRef}
              placeholder="Спросите что-нибудь… (Enter — новая строка)"
              value={text}
              onChange={e=>setText(e.target.value)}
              onKeyDown={e=>{ if ((e.metaKey || e.ctrlKey) && e.key === 'Enter') onSend() }}
              rows={4}
            />
          </div>
          <div className={styles.controls}>
            <div />
            <div className={styles.actionsBottom}>
              <Button onClick={onSend} disabled={busy || !text.trim()}>Отправить</Button>
              <label className={styles.ragToggle} title="Использовать базу знаний (RAG) при ответе">
                <input type="checkbox" checked={useRag} onChange={e=>setUseRag(e.target.checked)} />
                RAG из БЗ
              </label>
            </div>
          </div>
        </div>
      </Card>
    </div>
  )
}

### src/app/routes/gpt/ChatPage.module.css
.shell { 
  display: grid; 
  grid-template-columns: 280px 1fr; 
  gap: 12px; 
  /* stretch both columns to the same height */
  align-items: stretch; 
  /* occupy all available vertical space inside <main> */
  height: 100%;
  min-height: 100%;
}
/* main work area fills the grid track; inner components handle their own scroll */
.main { 
  height: 100%; 
  display: grid; 
  min-width: 0; /* allow content to shrink within the grid track */
}

@media (max-width: 980px) { 
  .shell { 
    grid-template-columns: 1fr; 
    height: auto;       /* allow natural height in single-column layout */
    min-height: 0;
  } 
}

### src/app/routes/gpt/ChatPage.tsx
import React from 'react'
import styles from './ChatPage.module.css'
import ChatSidebar from './ChatSidebar'
import Chat from './Chat'

export default function ChatPage() {
  return (
    <div className={styles.shell}>
      <ChatSidebar />
      <div className={styles.main}>
        <Chat />
      </div>
    </div>
  )
}

### src/app/routes/gpt/ChatSidebar.module.css
/* Sidebar fills the grid track and scrolls internally */
.sidebar {
  /* keep within the 280px grid track (padding/border won't overflow) */
  box-sizing: border-box;
  min-width: 0;
  background: var(--panel);
  border: 1px solid rgba(255,255,255, .08);
  border-radius: var(--radius);
  padding: 12px;
  overflow: auto;
}

.head { display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px; }
.title { font-weight: 600; }
.list { display: grid; gap: 4px; }
.row { display: grid; grid-template-columns: 1fr auto; align-items: center; gap: 4px; border-radius: 10px; }
.row:hover { background: rgba(255,255,255, .04); }
.active { background: rgba(79,124,255, .14); border: 1px solid rgba(79,124,255, .3); }
.item { text-align: left; padding: 8px 10px; border-radius: 10px; border: 1px solid transparent; background: transparent; color: var(--text); cursor: pointer; display: flex; align-items: center; gap: 8px; width: 100%; }
.empty { color: var(--muted); padding: 10px; text-align: center; }
.dot { width: 8px; height: 8px; border-radius: 50%; background: var(--primary); display: inline-block; }
.plus { width: 18px; height: 18px; border-radius: 50%; border: 1px dashed var(--muted); display: inline-flex; align-items: center; justify-content: center; font-weight: 700; font-size: 12px; }
.actions { display: flex; gap: 6px; padding-right: 6px; }
.icon { background: transparent; border: 0; cursor: pointer; color: var(--muted); }

### src/app/routes/gpt/ChatSidebar.tsx
import React, { useEffect, useState } from 'react'
import styles from './ChatSidebar.module.css'
import Button from '@shared/ui/Button'
import * as chats from '@shared/api/chats'
import { useNavigate, useParams } from 'react-router-dom'
import Modal from '@shared/ui/Modal'
import Input from '@shared/ui/Input'

type Item = { id: string; name?: string }

export default function ChatSidebar() {
  const [items, setItems] = useState<Item[]>([])
  const [loading, setLoading] = useState(true)
  const [renameId, setRenameId] = useState<string | null>(null)
  const [renameValue, setRenameValue] = useState('')
  const [deleteId, setDeleteId] = useState<string | null>(null)

  const nav = useNavigate()
  const { chatId } = useParams()

  async function refresh() {
    setLoading(true)
    try {
      const res = await chats.listChats({ limit: 100 })
      setItems((res.items || []).map((it:any)=>({ id: it.id || it.chat_id || it, name: it.name })))
    } finally { setLoading(false) }
  }

  useEffect(() => { refresh() }, [])

  async function onNew() {
    const { chat_id } = await chats.createChat('Новый чат')
    await refresh()
    nav(`/gpt/chat/${chat_id}`)
  }

  function openRename(it: Item) {
    setRenameId(it.id)
    setRenameValue(it.name || 'Untitled')
  }
  async function doRename() {
    if (!renameId) return
    await chats.renameChat(renameId, renameValue || 'Untitled')
    setRenameId(null)
    await refresh()
  }
  async function doDelete() {
    if (!deleteId) return
    await chats.deleteChat(deleteId)
    setDeleteId(null)
    await refresh()
    if (chatId === deleteId) nav('/gpt/chat')
  }

  return (
    <aside className={styles.sidebar}>
      <div className={styles.head}>
        <div className={styles.title}>Chats</div>
      </div>
      <div className={styles.list}>
        {/* New chat as a regular item */}
        <div className={styles.row}>
          <button className={styles.item} onClick={onNew} title="+ Новый чат">
            <span className={styles.plus}>+</span>
            <span className={styles.name}>+ Новый чат</span>
          </button>
        </div>

        {loading && <div className={styles.empty}>Loading…</div>}
        {!loading && items.length === 0 && <div className={styles.empty}>No chats yet</div>}
        {items.map(it => (
          <div key={it.id} className={[styles.row, chatId === it.id ? styles.active : ''].join(' ')}>
            <button
              className={styles.item}
              onClick={()=>nav(`/gpt/chat/${it.id}`)}
              title={it.name || it.id}
            >
              <span className={styles.dot} /> <span className={styles.name}>{it.name || 'Untitled'}</span>
            </button>
            <div className={styles.actions}>
              <button className={styles.icon} title="Rename" onClick={()=>openRename(it)}>✎</button>
              <button className={styles.icon} title="Delete" onClick={()=>setDeleteId(it.id)}>🗑</button>
            </div>
          </div>
        ))}
      </div>

      <Modal open={!!renameId} onClose={()=>setRenameId(null)} title="Rename chat"
        footer={<><Button variant="ghost" onClick={()=>setRenameId(null)}>Cancel</Button><Button onClick={doRename}>Save</Button></>}>
        <Input className="w-100" value={renameValue} onChange={e=>setRenameValue(e.target.value)} />
      </Modal>

      <Modal open={!!deleteId} onClose={()=>setDeleteId(null)} title="Delete chat"
        footer={<><Button variant="ghost" onClick={()=>setDeleteId(null)}>Cancel</Button><Button variant="danger" onClick={doDelete}>Delete</Button></>}>
        <div>Удалить чат безвозвратно?</div>
      </Modal>
    </aside>
  )
}

### src/app/routes/gpt/Doc.tsx
import React from 'react'
import Card from '@shared/ui/Card'

export default function Doc() {
  return (
    <Card>
      <h2>RAG Documents</h2>
      <p>Здесь позже появится список / загрузка / поиск.</p>
    </Card>
  )
}

### src/app/routes/gpt/GPTLayout.module.css
/* === Patch: make the app fill the viewport and prevent nested scrollbugs === */
.shell { 
  display: grid; 
  grid-template-rows: auto 1fr auto; 
  min-height: 100dvh; 
  min-height: 100vh;
}

.header { 
  display: grid; 
  grid-template-columns: auto 1fr auto; 
  align-items: center; 
  gap: 12px; 
  padding: 10px 16px; 
  position: sticky; 
  top: 0; 
  z-index: 10; 
  background: var(--bg); 
  border-bottom: 1px solid rgba(255,255,255,.08); 
}

.brand { display: inline-flex; align-items: center; gap: 10px; min-width: 0; }
.brand img { height: 28px; width: auto; display: block; }
.brandName { font-weight: 900; letter-spacing: .2px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }

.nav { display: flex; justify-content: center; }
.segWrap { width: min(720px, 50vw); display: flex; justify-content: center; }
.seg { display: inline-flex; gap: 0; background: rgba(255,255,255,.06); border: 1px solid rgba(255,255,255,.14); border-radius: 12px; padding: 2px; width: 100%; justify-content: center; }
.segBtn { padding: 6px 12px; border-radius: 10px; color: var(--text); text-decoration: none; font-weight: 600; flex: 1 0 auto; text-align: center; }
.segBtn:hover { background: rgba(255,255,255,.06); }
.active { background: var(--primary); color: white; }

.right { display: inline-flex; align-items: center; gap: 12px; }
.user { color: var(--muted); white-space: nowrap; }
.mocks { font-size: 12px; padding: 2px 8px; border-radius: 999px; background: rgba(79,124,255,.18); border: 1px solid rgba(79,124,255,.45); }

/* Keep layout-level overflow hidden so inner columns can scroll independently */
.main { padding: 12px 16px; overflow: hidden; }

/* Hide footer for now */
.footer { display: none; }

### src/app/routes/gpt/GPTLayout.tsx
import React from 'react'
import { Outlet, NavLink, useNavigate } from 'react-router-dom'
import Button from '@shared/ui/Button'
import styles from './GPTLayout.module.css'
import { useAuth } from '@app/store/auth'
import ThemeSwitch from '@shared/ui/ThemeSwitch'

const USE_MOCKS = import.meta.env.VITE_USE_MOCKS === 'true'

export default function GPTLayout() {
  const nav = useNavigate()
  const { logout, user } = useAuth()
  const isAdmin = (user?.role || '').toLowerCase() === 'admin'

  // Logo is served from /public/logo.png to avoid bundler import issues.
  const logoSrc = '/logo.png'

  return (
    <div className={styles.shell}>
      <header className={styles.header}>
        {/* Left: logo + brand */}
        <div className={styles.brand}>
          <img
            src={logoSrc}
            alt="Почемучка logo"
            onError={(e)=>{ const el=e.currentTarget as HTMLImageElement; el.style.display='none' }}
          />
          <div className={styles.brandName}>Почемучка</div>
        </div>

        {/* Center: segmented nav (50% header width) */}
        <nav className={styles.nav}>
          <div className={styles.segWrap}>
            <div className={styles.seg}>
              <NavLink to="/gpt/chat" className={({isActive}) => [styles.segBtn, isActive ? styles.active : ''].join(' ')}>Чат</NavLink>
              <NavLink to="/gpt/analyze" className={({isActive}) => [styles.segBtn, isActive ? styles.active : ''].join(' ')}>Аналитика</NavLink>
              {isAdmin && (
                <NavLink to="/gpt/rag" className={({isActive}) => [styles.segBtn, isActive ? styles.active : ''].join(' ')}>База знаний</NavLink>
              )}
            </div>
          </div>
        </nav>

        {/* Right: mocks -> role -> theme -> logout */}
        <div className={styles.right}>
          {USE_MOCKS && <span className={styles.mocks}>Mocks ON</span>}
          <span className={styles.user}>{user?.role || ''}</span>
          <ThemeSwitch />
          <Button variant="ghost" onClick={async () => { await logout(); nav('/login') }}>Выйти</Button>
        </div>
      </header>

      <main className={styles.main}>
        <Outlet />
      </main>

      <footer className={styles.footer}>{/* пустой подвал, заполним позже */}</footer>
    </div>
  )
}

### src/app/routes/gpt/Rag.tsx
import React from 'react'
import Card from '@shared/ui/Card'

export default function Rag() {
  return (
    <Card>
      <h2>RAG</h2>
      <p>Здесь появится список документов, загрузка и поиск по базе знаний.</p>
    </Card>
  )
}

### src/app/routes/gpt/RagPage.module.css
.wrap { display: grid; gap: 12px; }
.card { display: grid; gap: 10px; }
.header { display: grid; grid-template-columns: 1fr auto; align-items: center; gap: 12px; }
.title { font-weight: 700; letter-spacing: .2px; }
.controls { display: inline-flex; gap: 8px; align-items: center; }
.search { width: 260px; }
.tableWrap { overflow: auto; margin-top: -6px; } /* визуально объединяем с хедером карточки */
.clickable { cursor: pointer; user-select: none; display: inline-flex; gap: 6px; align-items: center; }
.filterHint { color: var(--muted); font-size: 12px; }
.more { padding: 8px; display: flex; justify-content: center; }

### src/app/routes/gpt/RagPage.tsx
import React, { useEffect, useMemo, useState } from 'react'
import Card from '@shared/ui/Card'
import Input from '@shared/ui/Input'
import Button from '@shared/ui/Button'
import Badge from '@shared/ui/Badge'
import Modal from '@shared/ui/Modal'
import Popover from '@shared/ui/Popover'
import { FilterIcon } from '@shared/ui/Icon'
import Select from '@shared/ui/Select'
import FilePicker from '@shared/ui/FilePicker'
import * as rag from '@shared/api/rag'
import styles from './RagPage.module.css'

type Doc = { id: string; name: string; status: string; tags?: string[]; created_at?: string }
type ColKey = keyof Pick<Doc, 'name'|'status'|'tags'|'created_at'>

export default function RagPage() {
  const [items, setItems] = useState<Doc[]>([])
  const [cursor, setCursor] = useState<string | null>(null)
  const [busy, setBusy] = useState(false)

  const [q, setQ] = useState('')
  const [filters, setFilters] = useState<Partial<Record<ColKey, string>>>({})
  const [pop, setPop] = useState<{ open: boolean, col?: ColKey, anchor?: {x:number,y:number} }>({ open: false })

  const [openAdd, setOpenAdd] = useState(false)
  const [file, setFile] = useState<File | null>(null)

  async function load(reset=false) {
    setBusy(true)
    try {
      const { items, next_cursor } = await rag.listDocs({ cursor: reset? undefined : cursor || undefined })
      setItems(prev => reset ? items : [...prev, ...items])
      setCursor(next_cursor || null)
    } finally { setBusy(false) }
  }
  useEffect(() => { load(true) }, [])

  const rows = useMemo(() => {
    return items.filter(d => {
      const text = (d.name + ' ' + (d.tags || []).join(' ') + ' ' + (d.created_at || '') + ' ' + d.status).toLowerCase()
      if (q.trim() && !text.includes(q.toLowerCase())) return false
      if (filters.name && !d.name.toLowerCase().includes(filters.name.toLowerCase())) return false
      if (filters.status && d.status !== filters.status) return false
      if (filters.tags && !(d.tags || []).join(',').toLowerCase().includes((filters.tags||'').toLowerCase())) return false
      if (filters.created_at && !(d.created_at || '').toLowerCase().includes((filters.created_at||'').toLowerCase())) return false
      return true
    })
  }, [items, q, filters])

  function openFilter(col: ColKey, el: HTMLElement) {
    const r = el.getBoundingClientRect()
    setPop({ open: true, col, anchor: { x: r.left, y: r.bottom + 6 } })
  }
  function clearAll() { setFilters({}); setPop({ open:false }) }

  async function doUpload() {
    if (!file) return
    setBusy(true)
    try {
      await rag.uploadFile(file, file.name)
      setOpenAdd(false)
      setFile(null)
      await load(true)
    } finally { setBusy(false) }
  }

  const hasAnyFilter = Object.values(filters).some(Boolean)

  return (
    <div className={styles.wrap}>
      <Card className={styles.card}>
        <div className={styles.header}>
          <div className={styles.title}>База знаний — документы</div>
          <div className={styles.controls}>
            <Input className={styles.search} placeholder="Поиск…" value={q} onChange={e=>setQ(e.target.value)} />
            {hasAnyFilter && <Badge onClick={clearAll}>Сбросить фильтры</Badge>}
            <Button onClick={()=>setOpenAdd(true)}>Добавить</Button>
          </div>
        </div>

        <div className={styles.tableWrap}>
          <table className="table">
            <thead>
              <tr>
                <th>Документ <button className="icon" onClick={(e)=>openFilter('name', e.currentTarget)}><FilterIcon/></button></th>
                <th>Статус <button className="icon" onClick={(e)=>openFilter('status', e.currentTarget)}><FilterIcon/></button></th>
                <th>Теги <button className="icon" onClick={(e)=>openFilter('tags', e.currentTarget)}><FilterIcon/></button></th>
                <th>Создано <button className="icon" onClick={(e)=>openFilter('created_at', e.currentTarget)}><FilterIcon/></button></th>
              </tr>
            </thead>
            <tbody>
              {rows.map(doc => (
                <tr key={doc.id}>
                  <td>{doc.name}</td>
                  <td><Badge tone={doc.status==='ready'?'success':doc.status==='processing'?'warn':doc.status==='error'?'danger':'neutral'}>{doc.status}</Badge></td>
                  <td>{(doc.tags || []).join(', ') || '—'}</td>
                  <td className="muted">{doc.created_at || '—'}</td>
                </tr>
              ))}
              {rows.length===0 && !busy && <tr><td colSpan={4} className="muted">Нет документов</td></tr>}
            </tbody>
          </table>
        </div>
      </Card>

      <Modal open={openAdd} onClose={()=>{setOpenAdd(false); setFile(null)}} title="Новый документ" size="half"
        footer={<>
          <Button variant="ghost" onClick={()=>{setOpenAdd(false); setFile(null)}}>Отмена</Button>
          <Button onClick={doUpload} disabled={!file || busy}>Загрузить</Button>
        </>}>
        <div className="stack">
          {/* В компоненте FilePicker в проекте используется проп onFileSelected */}
          <FilePicker onFileSelected={setFile} />
          <div className="muted">{file ? `Выбрано: ${file.name}` : 'Выберите файл для загрузки'}</div>
        </div>
      </Modal>

      <Popover open={pop.open} anchor={pop.anchor || null} onClose={()=>setPop({open:false})} title="Фильтр">
        {pop.col === 'name' && (
          <Input autoFocus placeholder="содержит…" value={filters.name||''} onChange={e=>setFilters(f=>({ ...f, name: e.target.value||undefined }))} />
        )}
        {pop.col === 'status' && (
          <Select value={filters.status||''} onChange={e=>setFilters(f=>({ ...f, status: (e.target as HTMLSelectElement).value || undefined }))}>
            <option value="">любой</option>
            <option value="uploaded">uploaded</option>
            <option value="normalizing">normalizing</option>
            <option value="chunking">chunking</option>
            <option value="embedding">embedding</option>
            <option value="indexing">indexing</option>
            <option value="ready">ready</option>
            <option value="archived">archived</option>
            <option value="deleting">deleting</option>
            <option value="error">error</option>
          </Select>
        )}
        {pop.col === 'tags' && (
          <Input placeholder="содержит…" value={filters.tags||''} onChange={e=>setFilters(f=>({ ...f, tags: e.target.value||undefined }))} />
        )}
        {pop.col === 'created_at' && (
          <Input placeholder="YYYY-MM…" value={filters.created_at||''} onChange={e=>setFilters(f=>({ ...f, created_at: e.target.value||undefined }))} />
        )}
        <div style={{display:'flex', justifyContent:'end', gap:8, marginTop:8}}>
          <Button size="sm" variant="ghost" onClick={()=>{ if(pop.col) setFilters(f=>({ ...f, [pop.col!]: undefined })); }}>Очистить</Button>
          <Button size="sm" onClick={()=>setPop({open:false})}>Применить</Button>
        </div>
      </Popover>
    </div>
  )
}

### src/app/store/auth.ts
import { create } from 'zustand'
import * as auth from '@shared/api/auth'

export type User = { id: string; login?: string; fio?: string; role?: string }

type State = {
  user: User | null
  loading: boolean
  error?: string | null
}

type Actions = {
  login: (login: string, password: string) => Promise<void>
  fetchMe: () => Promise<User | null>
  logout: () => Promise<void>
}

export const useAuth = create<State & Actions>((set, get) => ({
  user: null,
  loading: false,
  error: null,

  async login(login, password) {
    set({ loading: true, error: null })
    try {
      await auth.login(login, password)
      await get().fetchMe()
    } catch (e: any) {
      set({ error: e?.message || 'Login failed' })
      throw e
    } finally {
      set({ loading: false })
    }
  },

  async fetchMe() {
    set({ loading: true, error: null })
    try {
      const me = await auth.me()
      set({ user: me || null })
      return me || null
    } catch {
      set({ user: null })
      return null
    } finally {
      set({ loading: false })
    }
  },

  async logout() {
    try { await auth.logout() } finally { set({ user: null }) }
  }
}))

### src/main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import AppRouter from './app/router'
import './theme.css'

const USE_MOCKS = import.meta.env.VITE_USE_MOCKS === 'true'
if (USE_MOCKS) {
  await import('./mocks/enableMocks')
}

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <AppRouter />
  </React.StrictMode>
)

### src/mocks/enableMocks.ts
import { mockFetch } from './mockFetch'

function toUrl(input: RequestInfo | URL): string {
  if (typeof input === 'string') return input
  if (input instanceof URL) return input.toString()
  // Request
  try {
    // @ts-ignore
    return input.url || String(input)
  } catch {
    // @ts-ignore
    return String(input)
  }
}

// Replace global fetch to ensure ALL calls go through mocks in dev.
if (typeof window !== 'undefined') {
  const original = window.fetch.bind(window)
  // @ts-ignore
  window.fetch = (input: RequestInfo | URL, init?: RequestInit) => {
    const url = toUrl(input)
    // Allow opting-out: if request has header 'X-Bypass-Mock', go to real fetch
    if (init && (init as any).headers && (init as any).headers['X-Bypass-Mock']) {
      return original(input, init)
    }
    return mockFetch(url, init as any)
  }
}

### src/mocks/mockFetch.ts
// Simple in-app fetch mock. Works when VITE_USE_MOCKS=true
// Emulates a subset of backend endpoints used by the app, including SSE for chat and simple queues.
type Opts = RequestInit & { idempotencyKey?: string }
const encoder = new TextEncoder()

type User = { id: string; login: string; fio?: string; role?: string; password?: string }
type Message = { role: 'user'|'assistant'; content: string }
type Chat = { id: string; name: string; messages: Message[] }
type RagDoc = { id: string; name: string; status: 'uploaded'|'processing'|'ready'|'error'; tags: string[]; created_at: string }
type AnalyzeTask = { id: string; source?: string; status: 'queued'|'processing'|'done'|'error'; result?: string; created_at: string }

const db = {
  users: [{ id: 'u1', login: 'admin', password: 'admin', fio: 'Администратор', role: 'admin' } as User],
  chats: new Map<string, Chat>(),
  tokens: new Map<string, string>(), // access_token -> userId
  rag: [] as RagDoc[],
  analyze: [] as AnalyzeTask[]
}

function jsonResponse(body: any, init: ResponseInit = {}) {
  return new Response(JSON.stringify(body), { status: 200, headers: { 'Content-Type': 'application/json' }, ...init })
}
function noContent() { return new Response(null, { status: 204 }) }
function unauthorized() { return new Response('unauthorized', { status: 401 }) }
function notFound() { return new Response('not found', { status: 404 }) }
function badRequest(msg='bad request') { return new Response(msg, { status: 400 }) }

function parseUrl(url: string) {
  // Works with relative like "/api/..." and absolute like "http://x/api/..."
  try {
    const u = new URL(url, window.location.origin)
    return u
  } catch {
    return new URL(window.location.origin + url.replace(/^\//, ''))
  }
}

async function readJson(body?: BodyInit | null) {
  if (!body) return null
  if (typeof body === 'string') { try { return JSON.parse(body) } catch { return null } }
  if (body instanceof FormData) { return body }
  // Other types: ignore for simplicity
  return null
}

function requireAuth(headers: Headers): User | null {
  const auth = headers.get('Authorization') || ''
  const token = auth.startsWith('Bearer ') ? auth.slice(7) : null
  if (!token) return null
  const uid = db.tokens.get(token || '')
  const user = db.users.find(u => u.id === uid)
  return user || null
}

function sseStream(lines: string[], delayMs = 40) {
  return new ReadableStream<Uint8Array>({
    async start(controller) {
      for (const part of lines) {
        const chunk = `data: ${part}\n\n`
        controller.enqueue(encoder.encode(chunk))
        await new Promise(r => setTimeout(r, delayMs))
      }
      controller.close()
    }
  })
}

function paginate<T extends { id?: string }>(arr: T[], cursor?: string | null, limit = 20) {
  let start = 0
  if (cursor) {
    const idx = (arr as any[]).findIndex((it:any) => (it.id || it.chat_id) === cursor)
    start = idx >= 0 ? idx + 1 : 0
  }
  const items = (arr as any[]).slice(start, start + limit)
  const next_cursor = (start + limit) < (arr as any[]).length ? ((arr as any[])[start + limit - 1] as any).id : null
  return { items, next_cursor }
}

// Seed some RAG docs on first GET
function seedRag() {
  if (db.rag.length > 0) return
  const now = new Date().toISOString()
  db.rag.push(
    { id: 'doc1', name: 'Guide.pdf', status: 'ready', tags: ['guide'], created_at: now },
    { id: 'doc2', name: 'Spec.md', status: 'processing', tags: ['spec'], created_at: now },
    { id: 'doc3', name: 'Manual.txt', status: 'uploaded', tags: ['manual'], created_at: now }
  )
}

// Simple background progression helper (uploaded -> processing -> ready)
function progressRag(doc: RagDoc) {
  setTimeout(() => { doc.status = 'processing' }, 600)
  setTimeout(() => { doc.status = 'ready' }, 1400)
}

// Analyze progression (queued -> processing -> done with text result)
function progressAnalyze(task: AnalyzeTask) {
  setTimeout(() => { task.status = 'processing' }, 500)
  setTimeout(() => { task.status = 'done'; task.result = `Результат анализа: «${task.source || 'file'}» обработан.` }, 1500)
}

export async function mockFetch(url: string, opts: Opts = {}) {
  const u = parseUrl(url)
  const path = u.pathname
  const method = (opts.method || 'GET').toUpperCase()
  const body = await readJson(opts.body || null)

  // AUTH
  if (path === '/api/auth/login' && method === 'POST') {
    const { login, password } = (body as any) || {}
    const user = db.users.find(u => u.login === login && u.password === password)
    if (!user) return badRequest('invalid credentials')
    const access = crypto.randomUUID()
    db.tokens.set(access, user.id)
    return jsonResponse({ access_token: access, refresh_token: 'refresh_' + user.id, expires_in: 3600 })
  }
  if (path === '/api/auth/refresh' && method === 'POST') {
    // accept any refresh token that starts with "refresh_"
    const { refresh_token } = (body as any) || {}
    if (!refresh_token || !String(refresh_token).startsWith('refresh_')) return unauthorized()
    const uid = String(refresh_token).slice('refresh_'.length)
    const user = db.users.find(u => u.id === uid)
    if (!user) return unauthorized()
    const access = crypto.randomUUID()
    db.tokens.set(access, user.id)
    return jsonResponse({ access_token: access, expires_in: 3600 })
  }
  if (path === '/api/auth/me' && method === 'GET') {
    const user = requireAuth(new Headers(opts.headers || {}))
    if (!user) return unauthorized()
    const { password, ...safe } = user as any
    return jsonResponse(safe)
  }
  if (path === '/api/auth/logout' && method === 'POST') {
    const auth = new Headers(opts.headers || {}).get('Authorization') || ''
    const token = auth.startsWith('Bearer ') ? auth.slice(7) : ''
    db.tokens.delete(token)
    return noContent()
  }

  // CHATS
  if (path === '/api/chats' && method === 'POST') {
    const id = crypto.randomUUID()
    const name = (body && (body as any).name) || 'New chat'
    db.chats.set(id, { id, name, messages: [] })
    return jsonResponse({ chat_id: id })
  }
  if (path === '/api/chats' && method === 'GET') {
    const list = Array.from(db.chats.values()).map(c => ({ id: c.id, name: c.name }))
    return jsonResponse({ items: list, next_cursor: null })
  }
  const chatIdMatch = path.match(/^\/api\/chats\/([^\/]+)(?:\/(messages))?$/)
  if (chatIdMatch) {
    const chatId = chatIdMatch[1]
    const sub = chatIdMatch[2] // 'messages' or undefined
    const chat = db.chats.get(chatId)
    if (!chat && method !== 'PATCH' && method !== 'DELETE') return notFound()

    if (!sub && method === 'PATCH') {
      const name = (body as any)?.name || 'Untitled'
      const c = db.chats.get(chatId)
      if (!c) return notFound()
      c.name = name
      return jsonResponse({ ok: true })
    }
    if (!sub && method === 'DELETE') {
      db.chats.delete(chatId)
      return noContent()
    }

    if (sub === 'messages' && method === 'GET') {
      const msgs = chat ? chat.messages : []
      return jsonResponse({ items: msgs, next_cursor: null })
    }

    if (sub === 'messages' && method === 'POST') {
      const payload = (body as any) || {}
      const userMsg = (payload.messages?.[0]?.content) || ''
      if (chat) chat.messages.push({ role: 'user', content: userMsg })

      const canned = `Привет! Это моковый ответ на: "${userMsg}".\nМоки включены, бэкенд не требуется.`

      if (payload.response_stream) {
        const tokens = Array.from(canned)
        const stream = sseStream(tokens, 18)
        // also push the final assistant message into history (joined)
        const full = tokens.join('')
        if (chat) chat.messages.push({ role: 'assistant', content: full })
        const headers = new Headers({
          'Content-Type': 'text/event-stream; charset=utf-8',
          'Cache-Control': 'no-cache',
          'Connection': 'keep-alive'
        })
        return new Response(stream, { status: 200, headers })
      } else {
        if (chat) chat.messages.push({ role: 'assistant', content: canned })
        return jsonResponse({ message: { role: 'assistant', content: canned } })
      }
    }
  }

  // RAG
  if (path === '/api/rag' && method === 'GET') {
    seedRag()
    const q = u.searchParams.get('q')?.toLowerCase() || ''
    const status = u.searchParams.get('status') || ''
    const cursor = u.searchParams.get('cursor') || undefined
    let data = db.rag.slice()
    if (q) data = data.filter(d => d.name.toLowerCase().includes(q))
    if (status) data = data.filter(d => d.status === status)
    const { items, next_cursor } = paginate(data, cursor, 20)
    return jsonResponse({ items, next_cursor })
  }
  if (path === '/api/rag/upload' && method === 'POST') {
    const name = (body instanceof FormData) ? (body.get('name') as string || (body.get('file') as File)?.name || 'document') : 'document'
    const doc: RagDoc = { id: crypto.randomUUID(), name, status: 'uploaded', tags: [], created_at: new Date().toISOString() }
    db.rag.unshift(doc)
    progressRag(doc)
    return jsonResponse({ id: doc.id, status: doc.status })
  }
  if (path === '/api/rag/search' && method === 'POST') {
    const q = (body as any)?.text || ''
    return jsonResponse({ items: [
      { document_id: db.rag[0]?.id || 'doc1', chunk_id: '1', score: 0.92, snippet: `Найдено по запросу "${q}" — фрагмент №1` },
      { document_id: db.rag[0]?.id || 'doc1', chunk_id: '2', score: 0.87, snippet: `Найдено по запросу "${q}" — фрагмент №2` }
    ]})
  }

  // ANALYZE
  if (path === '/api/analyze' && method === 'GET') {
    const items = db.analyze.slice().sort((a,b) => (b.created_at > a.created_at ? 1 : -1))
    return jsonResponse({ items })
  }
  if (path === '/api/analyze' && method === 'POST') {
    let source = ''
    if (body instanceof FormData) {
      source = (body.get('file') as File)?.name || 'file'
    } else {
      source = (body as any)?.url || ''
    }
    if (!source) return badRequest('source required')
    const task: AnalyzeTask = { id: crypto.randomUUID(), source, status: 'queued', created_at: new Date().toISOString() }
    db.analyze.unshift(task)
    progressAnalyze(task)
    return jsonResponse({ id: task.id, status: task.status })
  }
  const analyzeMatch = path.match(/^\/api\/analyze\/([^\/]+)$/)
  if (analyzeMatch && method === 'GET') {
    const id = analyzeMatch[1]
    const t = db.analyze.find(x => x.id === id)
    if (!t) return notFound()
    return jsonResponse(t)
  }

  // Unknown: pass-through to real fetch (allows gradual mocking)
  return fetch(url, opts)
}

### src/shared/api/analyze.ts
import { apiFetch } from './base'

export async function listAnalyze() {
  const res = await apiFetch('/analyze', { method: 'GET' })
  return res.json()
}

export async function createAnalyze(payload: { url?: string; file?: File }) {
  if (payload.file) {
    const fd = new FormData()
    fd.set('file', payload.file)
    const res = await apiFetch('/analyze', { method: 'POST', body: fd })
    return res.json()
  }
  const res = await apiFetch('/analyze', { method: 'POST', body: JSON.stringify({ url: payload.url }) })
  return res.json()
}

export async function getAnalyze(id: string) {
  const res = await apiFetch(`/analyze/${id}`, { method: 'GET' })
  return res.json()
}

### src/shared/api/auth.ts
import { apiFetch } from './base'
import { saveTokens } from '@shared/lib/storage'

export async function login(login: string, password: string) {
  const res = await apiFetch('/auth/login', { method: 'POST', body: JSON.stringify({ login, password }) })
  const data = await res.json() as any
  const expires_at = Date.now() + (data.expires_in ? data.expires_in*1000 : 50*60*1000)
  saveTokens({ access_token: data.access_token, refresh_token: data.refresh_token, expires_at })
  return data
}
export async function me() {
  const res = await apiFetch('/auth/me', { method: 'GET' })
  return res.json()
}
export async function logout() {
  await apiFetch('/auth/logout', { method: 'POST' })
  saveTokens(null)
}

### src/shared/api/base.ts
import { loadTokens, saveTokens } from '@shared/lib/storage'

const API_BASE = import.meta.env.VITE_API_BASE || '/api'

type FetchOpts = RequestInit & { idempotencyKey?: string }

async function refreshToken() {
  const tokens = loadTokens()
  if (!tokens?.refresh_token) return null
  const res = await fetch(`${API_BASE}/auth/refresh`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ refresh_token: tokens.refresh_token })
  })
  if (!res.ok) { saveTokens(null); return null }
  const data = await res.json() as any
  const expires_at = Date.now() + (data.expires_in ? data.expires_in*1000 : 50*60*1000)
  const newTokens = { access_token: data.access_token, refresh_token: data.refresh_token ?? tokens.refresh_token, expires_at }
  saveTokens(newTokens)
  return newTokens
}

export async function apiFetch(path: string, opts: FetchOpts = {}) {
  const tokens = loadTokens()
  const headers: Record<string,string> = { ...(opts.headers as Record<string,string> || {}) }
  if (!headers['Content-Type'] && !(opts.body instanceof FormData)) headers['Content-Type'] = 'application/json'
  if (tokens?.access_token) headers['Authorization'] = `Bearer ${tokens.access_token}`
  if (opts.idempotencyKey) headers['Idempotency-Key'] = opts.idempotencyKey

  let res = await fetch(`${API_BASE}${path}`, { ...opts, headers })

  // If unauthorized, try refresh once
  if (res.status === 401 && tokens?.refresh_token) {
    const newTokens = await refreshToken()
    if (newTokens?.access_token) {
      headers['Authorization'] = `Bearer ${newTokens.access_token}`
      res = await fetch(`${API_BASE}${path}`, { ...opts, headers })
    }
  }
  if (!res.ok) {
    const text = await res.text()
    throw new Error(text || `HTTP ${res.status}`)
  }
  return res
}

### src/shared/api/chats.ts
import { apiFetch } from './base'
import { parseSSE } from '@shared/lib/sse'

export async function listChats(params: { cursor?: string; limit?: number; q?: string } = {}) {
  const qs = new URLSearchParams()
  if (params.limit) qs.set('limit', String(params.limit))
  if (params.cursor) qs.set('cursor', params.cursor)
  if (params.q) qs.set('q', params.q)
  const res = await apiFetch(`/chats?${qs.toString()}`, { method: 'GET' })
  return res.json() as Promise<{ items: any[]; next_cursor?: string | null }>
}

export async function createChat(name?: string) {
  const res = await apiFetch('/chats', { method: 'POST', body: name ? JSON.stringify({ name }) : undefined })
  return res.json() as Promise<{ chat_id: string }>
}

export async function listMessages(chat_id: string, params: { cursor?: string; limit?: number } = {}) {
  const qs = new URLSearchParams()
  if (params.limit) qs.set('limit', String(params.limit))
  if (params.cursor) qs.set('cursor', params.cursor)
  const res = await apiFetch(`/chats/${chat_id}/messages?${qs.toString()}`, { method: 'GET' })
  return res.json() as Promise<{ items: any[]; next_cursor?: string | null }>
}

export async function sendMessage(chat_id: string, body: any) {
  const res = await apiFetch(`/chats/${chat_id}/messages`, { method: 'POST', body: JSON.stringify(body), idempotencyKey: crypto.randomUUID() })
  return res.json()
}

export async function* sendMessageStream(chat_id: string, body: any) {
  const res = await apiFetch(`/chats/${chat_id}/messages`, {
    method: 'POST',
    body: JSON.stringify({ ...body, response_stream: true }),
    idempotencyKey: crypto.randomUUID()
  })
  const contentType = res.headers.get('content-type') || ''
  if (contentType.includes('text/event-stream')) {
    for await (const ev of parseSSE(res.body!)) {
      if (ev.data) yield ev.data
    }
  } else {
    // Fallback: NDJSON or chunked text
    const reader = res.body!.getReader()
    const decoder = new TextDecoder()
    let pending = ''
    while (true) {
      const { value, done } = await reader.read()
      if (done) break
      pending += decoder.decode(value, { stream: true })
      let idx
      while ((idx = pending.indexOf('\n')) !== -1) {
        const line = pending.slice(0, idx).trim()
        pending = pending.slice(idx + 1)
        if (line) yield line
      }
    }
    if (pending.trim()) yield pending.trim()
  }
}

export async function renameChat(chat_id: string, name: string) {
  const res = await apiFetch(`/chats/${chat_id}`, { method: 'PATCH', body: JSON.stringify({ name }) })
  return res.json()
}

export async function deleteChat(chat_id: string) {
  await apiFetch(`/chats/${chat_id}`, { method: 'DELETE' })
}

### src/shared/api/rag.ts
import { apiFetch } from './base'

export async function listDocs(params: { status?: string; tags?: string; q?: string; cursor?: string } = {}) {
  const qs = new URLSearchParams()
  if (params.status) qs.set('status', params.status)
  if (params.tags) qs.set('tags', params.tags)
  if (params.q) qs.set('q', params.q)
  if (params.cursor) qs.set('cursor', params.cursor)
  const res = await apiFetch(`/rag?${qs.toString()}`, { method: 'GET' })
  return res.json() as Promise<{ items: any[]; next_cursor?: string | null }>
}

export async function uploadFile(file: File, name?: string, tags?: string[]) {
  const fd = new FormData()
  fd.set('file', file)
  if (name) fd.set('name', name)
  if (tags?.length) tags.forEach(t => fd.append('tags', t))
  const res = await apiFetch('/rag/upload', { method: 'POST', body: fd })
  return res.json()
}

export async function ragSearch(payload: { text?: string; top_k?: number; min_score?: number }) {
  const res = await apiFetch('/rag/search', { method: 'POST', body: JSON.stringify(payload) })
  return res.json() as Promise<{ items: Array<{ document_id: string; chunk_id: string; score: number; snippet: string }> }>
}

### src/shared/lib/sse.ts
export type SSEEvent = { event?: string; data?: string; id?: string }
export async function* parseSSE(stream: ReadableStream<Uint8Array>) {
  const reader = stream.getReader()
  const decoder = new TextDecoder()
  let buf = ''
  try {
    while (true) {
      const { value, done } = await reader.read()
      if (done) break
      buf += decoder.decode(value, { stream: true })
      let idx
      while ((idx = buf.indexOf('\n\n')) !== -1) {
        const chunk = buf.slice(0, idx).trim()
        buf = buf.slice(idx + 2)
        if (!chunk) continue
        const ev: SSEEvent = {}
        for (const line of chunk.split('\n')) {
          const [k, ...rest] = line.split(':')
          const v = rest.join(':').trimStart()
          if (k === 'event') ev.event = v
          else if (k === 'data') ev.data = (ev.data ? ev.data + '\n' : '') + v
          else if (k === 'id') ev.id = v
        }
        yield ev
      }
    }
  } finally { reader.releaseLock() }
}

### src/shared/lib/storage.ts
export type Tokens = { access_token: string; refresh_token?: string; expires_at?: number }
const KEY = 'auth.tokens.v1'

export function saveTokens(t: Tokens | null) {
  if (!t) { localStorage.removeItem(KEY); return }
  localStorage.setItem(KEY, JSON.stringify(t))
}
export function loadTokens(): Tokens | null {
  try { return JSON.parse(localStorage.getItem(KEY) || 'null') } catch { return null }
}

### src/shared/ui/Badge.module.css
.badge {
  display: inline-block;
  padding: 2px 8px;
  border-radius: 999px;
  font-size: 12px;
  border: 1px solid transparent;
}
.neutral { background: rgba(255,255,255,.06); border-color: rgba(255,255,255,.12); }
.success { background: rgba(32,201,151,.15); border-color: rgba(32,201,151,.35); }
.warn { background: rgba(255,193,7,.18); border-color: rgba(255,193,7,.45); }
.danger { background: rgba(255,84,112,.18); border-color: rgba(255,84,112,.45); }
.info { background: rgba(79,124,255,.18); border-color: rgba(79,124,255,.45); }

### src/shared/ui/Badge.tsx
import React from 'react'
import styles from './Badge.module.css'
type Props = { tone?: 'neutral'|'success'|'warn'|'danger'|'info', children: React.ReactNode, className?: string }
export default function Badge({ tone='neutral', className='', children }: Props) {
  return <span className={[styles.badge, styles[tone], className].join(' ')}>{children}</span>
}

### src/shared/ui/Button.module.css
.btn {
  padding: 10px 14px;
  border-radius: 10px;
  border: 1px solid transparent;
  background: var(--panel);
  color: var(--text);
  cursor: pointer;
  transition: transform .05s ease, background .2s ease, border-color .2s ease;
  font-weight: 500;
}
.btn:active { transform: translateY(1px); }
.primary { background: var(--primary); color: white; }
.ghost { background: transparent; border-color: rgba(255,255,255,.12); }
.danger { background: var(--danger); color: white; }
.md { padding: 10px 14px; font-size: 14px; }
.sm { padding: 6px 10px; font-size: 12px; border-radius: 8px; }

### src/shared/ui/Button.tsx
import React from 'react'
import styles from './Button.module.css'

type Props = React.ButtonHTMLAttributes<HTMLButtonElement> & {
  variant?: 'primary' | 'ghost' | 'danger'
  size?: 'md' | 'sm'
}

export default function Button({ variant='primary', size='md', className='', ...rest }: Props) {
  const cls = [styles.btn, styles[variant], styles[size], className].join(' ')
  return <button {...rest} className={cls} />
}

### src/shared/ui/Card.module.css
.card {
  background: var(--panel);
  border: 1px solid rgba(255,255,255,.08);
  border-radius: var(--radius);
  padding: 16px;
  box-shadow: var(--shadow);
}

### src/shared/ui/Card.tsx
import React from 'react'
import styles from './Card.module.css'

export default function Card({ className='', ...rest }: React.HTMLAttributes<HTMLDivElement>) {
  return <div {...rest} className={[styles.card, className].join(' ')} />
}

### src/shared/ui/FilePicker.module.css
.wrap { display: inline-flex; align-items: center; gap: 10px; }
.name { color: var(--muted); font-size: 13px; }
.inputHidden { display: none; }

### src/shared/ui/FilePicker.tsx
import React, { useRef } from 'react'
import Button from './Button'
import styles from './FilePicker.module.css'

type Props = {
  onFileSelected: (file: File | null) => void
  accept?: string
  disabled?: boolean
  label?: string
}

export default function FilePicker({ onFileSelected, accept, disabled, label='Choose file' }: Props) {
  const ref = useRef<HTMLInputElement>(null)
  return (
    <div className={styles.wrap}>
      <input
        ref={ref}
        type="file"
        className={styles.inputHidden}
        accept={accept}
        onChange={e => onFileSelected(e.target.files?.[0] || null)}
        disabled={disabled}
      />
      <Button onClick={() => ref.current?.click()} disabled={disabled}>{label}</Button>
    </div>
  )
}

### src/shared/ui/Icon.tsx
import React from 'react'

export function FilterIcon({ active=false, size=14 }: { active?: boolean, size?: number }) {
  const stroke = active ? 'var(--primary)' : 'currentColor'
  const fill = active ? 'var(--primary)' : 'none'
  return (
    <svg width={size} height={size} viewBox="0 0 24 24" aria-hidden="true" style={{ verticalAlign: 'middle' }}>
      <path d="M3 5h18l-7 8v5l-4 2v-7L3 5z" fill={fill} stroke={stroke} strokeWidth="1.5"/>
    </svg>
  )
}

### src/shared/ui/Input.module.css
.input {
  background: var(--panel);
  border: 1px solid rgba(255,255,255,.12);
  color: var(--text);
  padding: 10px 12px;
  border-radius: 10px;
  outline: none;
}
.input::placeholder { color: var(--muted); }
.input:focus { border-color: var(--primary); }

### src/shared/ui/Input.tsx
import React from 'react'
import styles from './Input.module.css'

type Props = React.InputHTMLAttributes<HTMLInputElement>

export default function Input(props: Props) {
  return <input {...props} className={[styles.input, props.className||''].join(' ')} />
}

### src/shared/ui/Modal.module.css
.backdrop { position: fixed; inset: 0; background: rgba(0,0,0,.35); display: grid; place-items: center; z-index: 1000; padding: 16px; }
.modal { background: var(--panel); border: 1px solid rgba(255,255,255,.12); border-radius: 14px; width: 100%; max-width: 520px; box-shadow: var(--shadow); }
.head { display: flex; justify-content: space-between; align-items: center; padding: 10px 12px; border-bottom: 1px solid rgba(255,255,255,.08); }
.title { font-weight: 600; }
.body { padding: 12px; }
.foot { padding: 10px 12px; border-top: 1px solid rgba(255,255,255,.08); display: flex; gap: 8px; justify-content: end; }

/* половина экрана */
.half { max-width: 50vw; width: 50vw; }
@media (max-width: 980px) { .half { max-width: 90vw; width: 90vw; } }

### src/shared/ui/Modal.tsx
import React from 'react'
import styles from './Modal.module.css'
import Button from './Button'

type Size = 'md' | 'half'

type Props = {
  open: boolean
  title?: string
  onClose: () => void
  footer?: React.ReactNode
  children?: React.ReactNode
  size?: Size
}

export default function Modal({ open, title, onClose, children, footer, size='md' }: Props) {
  if (!open) return null
  return (
    <div className={styles.backdrop} onClick={onClose}>
      <div className={[styles.modal, size==='half' ? styles.half : ''].join(' ')} onClick={e=>e.stopPropagation()}>
        <div className={styles.head}>
          <div className={styles.title}>{title}</div>
          <Button size="sm" variant="ghost" onClick={onClose}>✕</Button>
        </div>
        <div className={styles.body}>{children}</div>
        {footer && <div className={styles.foot}>{footer}</div>}
      </div>
    </div>
  )
}

### src/shared/ui/Popover.module.css
.root { position: fixed; z-index: 1100; min-width: 220px; background: var(--panel); border: 1px solid rgba(255,255,255,.14); border-radius: 12px; box-shadow: var(--shadow); padding: 10px; }
.head { display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px; }
.title { font-weight: 600; font-size: 13px; }
.actions { display: flex; gap: 6px; }
.body { display: grid; gap: 8px; }
.footer { display: flex; justify-content: end; gap: 8px; margin-top: 8px; }

### src/shared/ui/Popover.tsx
import React, { useEffect } from 'react'
import { createPortal } from 'react-dom'
import styles from './Popover.module.css'
import Button from './Button'

type Props = {
  open: boolean
  title?: string
  anchor: { x: number, y: number } | null
  onClose: () => void
  children: React.ReactNode
  footer?: React.ReactNode
}

export default function Popover({ open, title, anchor, onClose, children, footer }: Props) {
  useEffect(() => {
    function onEsc(e: KeyboardEvent) { if (e.key === 'Escape') onClose() }
    function onClick(e: MouseEvent) {
      const el = document.getElementById('__popover__')
      if (!el) return
      if (!el.contains(e.target as Node)) onClose()
    }
    if (open) {
      document.addEventListener('keydown', onEsc)
      document.addEventListener('mousedown', onClick)
    }
    return () => {
      document.removeEventListener('keydown', onEsc)
      document.removeEventListener('mousedown', onClick)
    }
  }, [open, onClose])

  if (!open || !anchor) return null
  const style: React.CSSProperties = { left: Math.round(anchor.x), top: Math.round(anchor.y) }
  return createPortal(
    <div id="__popover__" className={styles.root} style={style}>
      {title && <div className={styles.head}><div className={styles.title}>{title}</div><Button size="sm" variant="ghost" onClick={onClose}>✕</Button></div>}
      <div className={styles.body}>{children}</div>
      {footer && <div className={styles.footer}>{footer}</div>}
    </div>,
    document.body
  )
}

### src/shared/ui/Select.module.css
.root { position: relative; display: inline-block; }
.select {
  -webkit-appearance: none;
  appearance: none;
  background: var(--input-bg, rgba(255,255,255,.06));
  border: 1px solid var(--input-border, rgba(255,255,255,.14));
  color: var(--text);
  border-radius: 10px;
  padding: 8px 30px 8px 10px;
  font: inherit;
  line-height: 1.2;
  outline: none;
  min-width: 160px;
}
.select:focus {
  box-shadow: 0 0 0 3px rgba(79,124,255,.25);
  border-color: var(--primary, #4f7cff);
}
.arrow {
  position: absolute;
  right: 8px;
  top: 50%;
  transform: translateY(-50%);
  pointer-events: none;
  opacity: .8;
}

### src/shared/ui/Select.tsx
import React from 'react'
import styles from './Select.module.css'

type Props = React.SelectHTMLAttributes<HTMLSelectElement> & { containerClassName?: string }

const Select = React.forwardRef<HTMLSelectElement, Props>(({ containerClassName, className, children, ...rest }, ref) => {
  return (
    <span className={[styles.root, containerClassName||''].join(' ')}>
      <select ref={ref} className={[styles.select, className||''].join(' ')} {...rest}>
        {children}
      </select>
      <svg className={styles.arrow} width="16" height="16" viewBox="0 0 24 24" aria-hidden="true">
        <path d="M7 10l5 5 5-5" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
      </svg>
    </span>
  )
})
Select.displayName = 'Select'
export default Select

### src/shared/ui/Textarea.module.css
.textarea {
  background: var(--panel);
  border: 1px solid rgba(255,255,255,.12);
  color: var(--text);
  padding: 10px 12px;
  border-radius: 10px;
  outline: none;
  resize: vertical;
  min-height: 80px;
  max-height: 300px;
  width: 100%;
  font: inherit;
  line-height: 1.35;
}
.textarea::placeholder { color: var(--muted); }
.textarea:focus { border-color: var(--primary); }

### src/shared/ui/Textarea.tsx
import React from 'react'
import styles from './Textarea.module.css'

type Props = React.TextareaHTMLAttributes<HTMLTextAreaElement>

const Textarea = React.forwardRef<HTMLTextAreaElement, Props>((props, ref) => {
  return <textarea {...props} ref={ref} className={[styles.textarea, props.className||''].join(' ')} />
})
Textarea.displayName = 'Textarea'

export default Textarea

### src/shared/ui/ThemeSwitch.tsx
import React, { useEffect, useState } from 'react'

type Mode = 'light' | 'dark'
const KEY = 'theme'

function getInitial(): Mode {
  const saved = (localStorage.getItem(KEY) as Mode | null)
  if (saved === 'light' || saved === 'dark') return saved
  // prefer system
  const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
  return prefersDark ? 'dark' : 'light'
}

export default function ThemeSwitch() {
  const [mode, setMode] = useState<Mode>(getInitial())

  useEffect(() => {
    document.documentElement.setAttribute('data-theme', mode === 'dark' ? '' : 'light')
    localStorage.setItem(KEY, mode)
  }, [mode])

  return (
    <button
      onClick={() => setMode(m => m === 'light' ? 'dark' : 'light')}
      title={mode === 'light' ? 'Switch to dark' : 'Switch to light'}
      style={{
        border: '1px solid rgba(255,255,255,.14)',
        background: 'transparent',
        color: 'inherit',
        borderRadius: 12,
        padding: '6px 10px',
        cursor: 'pointer'
      }}
    >
      {mode === 'light' ? '☀️ Light' : '🌙 Dark'}
    </button>
  )
}

### src/theme.css
:root {
  /* Palette */
  --bg: #0b1020;
  --text: #e9ecf8;
  --muted: #9aa3b2;
  --primary: #4f7cff;
  --danger: #ff5470;

  /* Panels */
  --panel: #11172a;
  --panel-alt: #0e1424;
  --chat-panel-bg: var(--panel-alt);
  --chat-panel-border: rgba(255,255,255,.08);

  /* UI */
  --radius: 14px;
  --shadow: 0 8px 24px rgba(0,0,0,.25);
}

/* Predictable sizing */
*, *::before, *::after { box-sizing: border-box; }

[data-theme="light"] {
  --bg: #ffffff;
  --text: #1d2433;
  --muted: #7a8597;
  --primary: #4f7cff;
  --danger: #ff5470;

  --panel: #f6f7fb;
  --panel-alt: #f2f4fb;
  --chat-panel-bg: var(--panel-alt);
  --chat-panel-border: rgba(0,0,0,.08);

  --shadow: 0 6px 24px rgba(0,0,0,.08);
}

html, body, #root { height: 100%; }
body {
  background: var(--bg);
  color: var(--text);
  margin: 0;
  font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a { color: inherit; text-decoration: none; }
.table { width: 100%; border-collapse: collapse; }
.table th, .table td { padding: 10px 12px; border-bottom: 1px solid rgba(255,255,255,.08); }
.table th { text-align: left; color: var(--muted); font-weight: 600; }
.table tr:hover td { background: rgba(255,255,255,.03); }

.controls { display: flex; gap: 8px; align-items: center; flex-wrap: wrap; }
.muted { color: var(--muted); }
.w-100 { width: 100%; }
.stack { display: grid; gap: 8px; }

/* === Pretty filter buttons (shared for RAG/Analyze) === */
.table th .icon,
.table th button.icon {
  appearance: none;
  -webkit-appearance: none;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 24px;
  height: 24px;
  margin-left: 6px;
  padding: 0;
  line-height: 1;
  border-radius: 8px;
  border: 1px solid var(--filter-border, rgba(255,255,255,.08));
  background: var(--filter-bg, rgba(255,255,255,.04));
  color: var(--muted);
  cursor: pointer;
  transition: background .15s ease, border-color .15s ease, color .15s ease, transform .03s ease;
}
.table th button.icon svg { width: 14px; height: 14px; pointer-events: none; }
.table th button.icon:hover {
  background: rgba(79,124,255,.12);
  border-color: rgba(79,124,255,.35);
  color: var(--text);
}
.table th button.icon:active { transform: translateY(1px); }
.table th button.icon:focus-visible {
  outline: 2px solid var(--primary);
  outline-offset: 2px;
}

/* Light theme adjustments */
[data-theme="light"] .table th button.icon {
  border-color: rgba(0,0,0,.08);
  background: rgba(0,0,0,.04);
}
[data-theme="light"] .table th button.icon:hover {
  background: rgba(79,124,255,.14);
  border-color: rgba(79,124,255,.40);
}

### src/theme.css.append.css
/* === Global tiny icon button used in table headers (filter buttons) === */
.icon {
  background: transparent;
  border: 0;
  color: var(--muted);
  padding: 4px;
  border-radius: 8px;
  cursor: pointer;
  vertical-align: middle;
}
.icon:hover { background: rgba(255,255,255,.06); color: var(--text); }
.icon:active { transform: translateY(1px); }

### tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": [
      "ES2020",
      "DOM",
      "DOM.Iterable"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "baseUrl": "./src",
    "paths": {
      "@app/*": [
        "app/*"
      ],
      "@shared/*": [
        "shared/*"
      ]
    }
  },
  "include": [
    "src"
  ],
  "references": [
    {
      "path": "./tsconfig.node.json"
    }
  ]
}
### tsconfig.node.json
{
  "compilerOptions": {
    "composite": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true
  },
  "include": [
    "vite.config.ts"
  ]
}
### vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tsconfigPaths from 'vite-tsconfig-paths'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react(), tsconfigPaths()],
  server: { port: 5173 },
  preview: { port: 5173 }
})

