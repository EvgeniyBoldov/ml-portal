#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã ML Portal
"""
import requests
import json

def test_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints"""
    base_url = "http://localhost:8000"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML Portal API...")
    
    # 1. Health check
    print("\n1. Health Check:")
    try:
        response = requests.get(f"{base_url}/healthz", timeout=5)
        print(f"   Status: {response.status_code}")
        print(f"   Response: {response.json()}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        return False
    
    # 2. OpenAPI docs
    print("\n2. OpenAPI Documentation:")
    try:
        response = requests.get(f"{base_url}/docs", timeout=5)
        print(f"   Status: {response.status_code}")
        print(f"   Available at: {base_url}/docs")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # 3. Admin API (should be protected)
    print("\n3. Admin API Protection:")
    try:
        response = requests.get(f"{base_url}/api/admin/users", timeout=5)
        print(f"   Status: {response.status_code}")
        print(f"   Response: {response.json()}")
        if response.status_code == 401:
            print("   ‚úÖ Admin API properly protected")
        else:
            print("   ‚ö†Ô∏è  Admin API not properly protected")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # 4. RAG API (should be protected)
    print("\n4. RAG API Protection:")
    try:
        response = requests.get(f"{base_url}/api/rag/search", timeout=5)
        print(f"   Status: {response.status_code}")
        if response.status_code == 401:
            print("   ‚úÖ RAG API properly protected")
        else:
            print("   ‚ö†Ô∏è  RAG API not properly protected")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    return True

def test_frontend():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Frontend...")
    
    try:
        response = requests.get("http://localhost:3000", timeout=5)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Frontend is accessible")
            return True
        else:
            print(f"   ‚ö†Ô∏è  Frontend returned status {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Frontend not accessible: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ ML Portal System Test")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    api_ok = test_api()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    frontend_ok = test_frontend()
    
    # –ò—Ç–æ–≥–∏
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("=" * 50)
    print(f"API: {'‚úÖ OK' if api_ok else '‚ùå FAILED'}")
    print(f"Frontend: {'‚úÖ OK' if frontend_ok else '‚ùå FAILED'}")
    
    if api_ok and frontend_ok:
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π")

if __name__ == "__main__":
    main()
