#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ E2E —Ç–µ—Å—Ç–æ–≤ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
"""
import asyncio
import subprocess
import sys
import time
from pathlib import Path

def run_command(cmd, timeout=300):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    try:
        result = subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True, timeout=timeout)
        return True, result.stdout
    except subprocess.TimeoutExpired:
        return False, f"Command timed out after {timeout} seconds"
    except subprocess.CalledProcessError as e:
        return False, e.stderr
    except Exception as e:
        return False, str(e)

def check_service_health(service_name, url, max_retries=30):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {service_name}...")
    
    for i in range(max_retries):
        try:
            import httpx
            with httpx.Client(timeout=5.0) as client:
                response = client.get(url)
                if response.status_code == 200:
                    print(f"‚úÖ {service_name} –≥–æ—Ç–æ–≤")
                    return True
        except:
            pass
        
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {service_name}... ({i+1}/{max_retries})")
        time.sleep(2)
    
    print(f"‚ùå {service_name} –Ω–µ –≥–æ—Ç–æ–≤")
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤ ML Portal")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker...")
    success, output = run_command("docker --version")
    if not success:
        print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return 1
    print("‚úÖ Docker –≥–æ—Ç–æ–≤")
    
    # 2. –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã
    print("\n2. –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤...")
    success, output = run_command("make build-local")
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {output}")
        return 1
    print("‚úÖ –û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã")
    
    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    print("\n3. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    success, output = run_command("make up-local")
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {output}")
        return 1
    print("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
    
    # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MinIO
    print("\n4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MinIO...")
    success, output = run_command("make init-models")
    if not success:
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MinIO: {output}")
    else:
        print("‚úÖ MinIO –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # 5. –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    print("\n5. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    services = [
        ("API", "http://localhost:8000/health"),
        ("PostgreSQL", "http://localhost:8000/health"),  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
        ("Redis", "http://localhost:8000/health"),
        ("Qdrant", "http://localhost:8000/health"),
        ("MinIO", "http://localhost:8000/health")
    ]
    
    all_ready = True
    for service_name, url in services:
        if not check_service_health(service_name, url):
            all_ready = False
    
    if not all_ready:
        print("‚ùå –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã")
        return 1
    
    print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã")
    
    # 6. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    print("\n6. –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤...")
    success, output = run_command("pip install httpx pytest pytest-asyncio")
    if not success:
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {output}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_cmd = "cd backend && python -m pytest tests/e2e/test_full_system.py -v -s --tb=short"
    success, output = run_command(test_cmd, timeout=600)  # 10 –º–∏–Ω—É—Ç –Ω–∞ —Ç–µ—Å—Ç—ã
    
    if success:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
        print(output)
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
        print(output)
        return 1
    
    # 7. –û—á–∏—Å—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    print("\n7. –û—á–∏—Å—Ç–∫–∞...")
    response = input("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã? (y/N): ").strip().lower()
    if response in ['y', 'yes', '–¥–∞']:
        success, output = run_command("make down-local")
        if success:
            print("‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {output}")
    
    print("\nüéâ E2E —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    return 0

if __name__ == "__main__":
    sys.exit(main())
