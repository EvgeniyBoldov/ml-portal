version: '3.8'

services:
  # API (легкий) - на легкой ВМ
  api:
    build:
      context: ../apps/api
      dockerfile: ../../infra/docker/api/Dockerfile.api
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    environment:
      - DATABASE_URL=postgresql://ml_portal:ml_portal@postgres:5432/ml_portal
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_BUCKET_RAG=rag
      - S3_BUCKET_ANALYSIS=analysis
    ports:
      - "8000:8000"
    networks:
      - ml-portal-network

  # Worker-RAG (низкий приоритет) - на легкой ВМ
  worker-rag:
    build:
      context: ../apps/api
      dockerfile: ../../infra/docker/worker/Dockerfile.worker
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    environment:
      - DATABASE_URL=postgresql://ml_portal:ml_portal@postgres:5432/ml_portal
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_BUCKET_RAG=rag
      - S3_BUCKET_ANALYSIS=analysis
    command: ["celery", "-A", "app.celery_app", "worker", "--loglevel=info", "--concurrency=1", "--queues=rag_low,cleanup_low"]
    networks:
      - ml-portal-network

  # Worker-Mixed (критический + средний приоритет) - на тяжелых ВМ
  worker-mixed:
    build:
      context: ../apps/api
      dockerfile: ../../infra/docker/worker/Dockerfile.worker
    deploy:
      replicas: 4  # 2 на каждой тяжелой ВМ
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    environment:
      - DATABASE_URL=postgresql://ml_portal:ml_portal@postgres:5432/ml_portal
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_BUCKET_RAG=rag
      - S3_BUCKET_ANALYSIS=analysis
    command: ["celery", "-A", "app.celery_app", "worker", "--loglevel=info", "--concurrency=2", "--queues=chat_critical,upload_high,analyze_medium,ocr_medium"]
    networks:
      - ml-portal-network

  # Embedding (средний приоритет) - на тяжелых ВМ
  emb:
    build:
      context: ../apps/api
      dockerfile: ../../infra/docker/emb/Dockerfile.emb
    deploy:
      replicas: 2  # 1 на каждой тяжелой ВМ
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    environment:
      - PORT=8001
    ports:
      - "8001:8001"
    networks:
      - ml-portal-network

  # LLM (высокий приоритет) - на тяжелых ВМ
  llm:
    build:
      context: ../apps/api
      dockerfile: ../../infra/docker/llm/Dockerfile.llm
    deploy:
      replicas: 2  # 1 на каждой тяжелой ВМ
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    environment:
      - PORT=8002
    ports:
      - "8002:8002"
    networks:
      - ml-portal-network

  # База данных (на легкой ВМ)
  postgres:
    image: postgres:15
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    environment:
      POSTGRES_DB: ml_portal
      POSTGRES_USER: ml_portal
      POSTGRES_PASSWORD: ml_portal
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ml-portal-network

  # Redis (на легкой ВМ)
  redis:
    image: redis:7-alpine
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - ml-portal-network

  # Qdrant (на легкой ВМ)
  qdrant:
    image: qdrant/qdrant:latest
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - ml-portal-network

  # MinIO (на легкой ВМ)
  minio:
    image: minio/minio:latest
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - ml-portal-network

  # Frontend (на легкой ВМ)
  frontend:
    image: ml-portal-frontend:latest
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    expose:
      - "3000"
    networks:
      - ml-portal-network

  # Nginx Reverse Proxy (на легкой ВМ)
  nginx:
    build:
      context: ../../infra/nginx
      dockerfile: ../../infra/docker/nginx/Dockerfile
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - frontend
    networks:
      - ml-portal-network

volumes:
  postgres_data:
  qdrant_data:
  minio_data:

networks:
  ml-portal-network:
    driver: overlay
    attachable: true
