### api/Dockerfile
FROM python:3.11-slim

ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PIP_NO_CACHE_DIR=1
WORKDIR /app

RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
 && rm -rf /var/lib/apt/lists/*

COPY docker/api/requirements.txt ./requirements.txt
RUN python -m pip install --upgrade pip && pip install -r requirements.txt

COPY backend/ ./

EXPOSE 8000
ENV PORT=8000

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

### api/requirements.txt
fastapi==0.111.0
uvicorn[standard]==0.30.1
pydantic==2.8.2
pydantic-settings==2.4.0
SQLAlchemy==2.0.32
alembic==1.13.2
psycopg2-binary==2.9.9
celery[redis]==5.4.0
redis==5.0.7
httpx==0.27.0
prometheus-client==0.20.0
PyJWT==2.9.0
argon2-cffi==23.1.0
qdrant-client==1.9.1
minio==7.2.7
python-multipart==0.0.9
pytest==8.2.2
pytest-asyncio==0.23.6
httpx==0.27.0

### emb/Dockerfile
FROM python:3.11-slim

ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PIP_NO_CACHE_DIR=1
WORKDIR /srv

COPY docker/emb/requirements.txt ./requirements.txt
RUN python -m pip install --upgrade pip && pip install -r requirements.txt

COPY backend/ ./
COPY docker/emb/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

EXPOSE 8001
ENV PORT=8001

ENTRYPOINT ["/entrypoint.sh"]
CMD []

### emb/entrypoint.sh
#!/bin/sh
set -e

is_true () {
  case "$(printf '%s' "$1" | tr '[:upper:]' '[:lower:]')" in
    1|true|yes|on) return 0 ;;
    *) return 1 ;;
  esac
}

PORT="${PORT:-8001}"
export PYTHONPATH=/srv

if is_true "${TEST_MODE}"; then
  echo "[emb] TEST_MODE=ON -> starting stub at :${PORT}"
  exec uvicorn stubs.emb_server:app --host 0.0.0.0 --port "${PORT}" --app-dir /srv
else
  echo "[emb] TEST_MODE=OFF -> starting proxy to REAL_EMBEDDINGS_URL=${REAL_EMBEDDINGS_URL:-<unset>} at :${PORT}"
  exec uvicorn adapters.emb_proxy:app --host 0.0.0.0 --port "${PORT}" --app-dir /srv
fi

### emb/requirements.txt
fastapi==0.111.0
uvicorn[standard]==0.30.1
httpx==0.27.0
pydantic==2.8.2

### frontend/Dockerfile
# --- Build stage ---
FROM node:20-alpine AS build
WORKDIR /app

COPY frontend/package*.json ./
RUN if [ -f package-lock.json ]; then npm ci --no-audit --no-fund; else npm install --no-audit --no-fund; fi

COPY frontend/ /app/

# Build-time configuration (no .env usage)
ARG VITE_API_BASE=http://api:8000
ARG VITE_USE_MOCKS=false
ENV VITE_API_BASE=${VITE_API_BASE}
ENV VITE_USE_MOCKS=${VITE_USE_MOCKS}

RUN npm run build

# --- Run stage ---
FROM node:20-alpine AS run
WORKDIR /srv
RUN npm i -g serve
COPY --from=build /app/dist/ /srv/dist/
EXPOSE 8080
CMD ["serve", "-s", "dist", "-l", "8080"]

### llm/Dockerfile
FROM python:3.11-slim

ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PIP_NO_CACHE_DIR=1
WORKDIR /srv

COPY docker/llm/requirements.txt ./requirements.txt
RUN python -m pip install --upgrade pip && pip install -r requirements.txt

COPY backend/ ./
COPY docker/llm/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

EXPOSE 8002
ENV PORT=8002

ENTRYPOINT ["/entrypoint.sh"]
CMD []

### llm/entrypoint.sh
#!/bin/sh
set -e

is_true () {
  case "$(printf '%s' "$1" | tr '[:upper:]' '[:lower:]')" in
    1|true|yes|on) return 0 ;;
    *) return 1 ;;
  esac
}

PORT="${PORT:-8002}"
export PYTHONPATH=/srv

if is_true "${TEST_MODE}"; then
  echo "[llm] TEST_MODE=ON -> starting stub at :${PORT}"
  exec uvicorn stubs.llm_server:app --host 0.0.0.0 --port "${PORT}" --app-dir /srv
else
  echo "[llm] TEST_MODE=OFF -> starting proxy to REAL_LLM_URL=${REAL_LLM_URL:-<unset>} at :${PORT}"
  exec uvicorn adapters.llm_proxy:app --host 0.0.0.0 --port "${PORT}" --app-dir /srv
fi

### llm/requirements.txt
fastapi==0.111.0
uvicorn[standard]==0.30.1
httpx==0.27.0
pydantic==2.8.2

### worker/Dockerfile
FROM python:3.11-slim

ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PIP_NO_CACHE_DIR=1
WORKDIR /app

RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
 && rm -rf /var/lib/apt/lists/*

COPY docker/worker/requirements.txt ./requirements.txt
RUN python -m pip install --upgrade pip && pip install -r requirements.txt

COPY backend/ ./

CMD ["celery", "-A", "app.celery_app", "worker", "--loglevel=info", "--concurrency=2"]

### worker/requirements.txt
celery[redis]==5.4.0
redis==5.0.7
httpx==0.27.0
pydantic==2.8.2
SQLAlchemy==2.0.32
psycopg[binary]==3.2.1
qdrant-client==1.9.1
minio==7.2.7
prometheus-client==0.20.0
PyJWT==2.9.0
argon2-cffi==23.1.0
python-multipart==0.0.9
fastapi==0.112.2

