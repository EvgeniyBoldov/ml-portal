version: '3.8'

services:
  # База данных
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ml_portal
      POSTGRES_USER: ml_portal
      POSTGRES_PASSWORD: ml_portal
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ml_portal"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage

  # MinIO
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # API (легкий)
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile.api
    environment:
      - DATABASE_URL=postgresql://ml_portal:ml_portal@postgres:5432/ml_portal
      - DB_URL=postgresql://ml_portal:ml_portal@postgres:5432/ml_portal
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_BUCKET_RAG=rag
      - S3_BUCKET_ANALYSIS=analysis
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - qdrant
      - minio

  # Worker (полный) - 1 экземпляр для тестирования
  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile.worker
    environment:
      - DATABASE_URL=postgresql://ml_portal:ml_portal@postgres:5432/ml_portal
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_BUCKET_RAG=rag
      - S3_BUCKET_ANALYSIS=analysis
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: ["celery", "-A", "app.celery_app", "worker", "--loglevel=info", "--concurrency=1"]

  # Embedding Worker - новая система эмбеддингов
  embedding-worker:
    build:
      context: .
      dockerfile: docker/emb/Dockerfile.emb
    environment:
      - DATABASE_URL=postgresql://ml_portal:ml_portal@postgres:5432/ml_portal
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_BUCKET_RAG=rag
      - S3_BUCKET_ANALYSIS=analysis
      - MODELS_BUCKET=models
      - MODELS_CACHE_DIR=/models-cache
      - EMB_MODEL_ID=sentence-transformers/all-MiniLM-L6-v2
      - EMB_MODEL_ALIAS=minilm
      - EMB_MODEL_REV=default
      - EMB_DIM=384
      - EMB_MAX_SEQ=256
      - EMB_DEVICE=cpu
      - EMB_QUEUES_RT=embed.minilm.rt
      - EMB_QUEUES_BULK=embed.minilm.bulk
      - BATCH_MAX_TOKENS_RT=4096
      - BATCH_MAX_TOKENS_BULK=16384
      - BATCH_MAX_WAIT_MS_RT=25
      - BATCH_MAX_WAIT_MS_BULK=200
      # Используем локальные модели
      - USE_LOCAL_MODELS=true
      - LOCAL_MODELS_DIR=/local-models
    volumes:
      - models-cache:/models-cache
      - ./models:/local-models:ro  # Монтируем локальные модели
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: ["celery", "-A", "app.celery_app", "worker", "--loglevel=info", "--concurrency=1", "--queues=embed.minilm.rt,embed.minilm.bulk"]

  # Embedding (1 экземпляр)
  emb:
    build:
      context: .
      dockerfile: docker/emb/Dockerfile.emb
    environment:
      - PORT=8001
    ports:
      - "8001:8001"
    depends_on:
      - api

  # LLM (1 экземпляр)
  llm:
    build:
      context: .
      dockerfile: docker/llm/Dockerfile.llm
    environment:
      - PORT=8002
      - REAL_LLM_URL=http://localhost:8002  # Для локального тестирования
    ports:
      - "8002:8002"
    depends_on:
      - api

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - api

volumes:
  postgres_data:
  qdrant_data:
  minio_data:
  models-cache:
