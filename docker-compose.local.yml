services:
  # База данных
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ml_portal
      POSTGRES_USER: ml_portal
      POSTGRES_PASSWORD: ml_portal
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ml_portal -d ml_portal"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Qdrant
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s

  # MinIO
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s

  # API
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile.api
    environment:
      # Database
      - DATABASE_URL=postgresql://ml_portal:ml_portal@postgres:5432/ml_portal
      - DB_URL=postgresql://ml_portal:ml_portal@postgres:5432/ml_portal
      
      # Redis
      - REDIS_URL=redis://redis:6379
      
      # Qdrant
      - QDRANT_URL=http://qdrant:6333
      
      # MinIO/S3
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_BUCKET_RAG=rag
      - S3_BUCKET_ANALYSIS=analysis
      
      # Test secrets for local development
      - JWT_SECRET=test-jwt-secret-key-for-local-development-only
      - PASSWORD_PEPPER=test-pepper-for-local-development
      
      # Email settings (disabled for local)
      - EMAIL_ENABLED=false
      
      # CORS settings
      - CORS_ENABLED=true
      - CORS_ORIGINS=["http://localhost:3000", "http://localhost:8080"]
      - CORS_ALLOW_CREDENTIALS=true
      
      # Auth settings
      - AUTH_MODE=token
      - COOKIE_AUTH_ENABLED=false
      
      # Rate limiting
      - RATE_LIMIT_LOGIN_ATTEMPTS=10
      - RATE_LIMIT_LOGIN_WINDOW=60
      
      # Password policy
      - PASSWORD_MIN_LENGTH=8
      - PASSWORD_REQUIRE_UPPERCASE=true
      - PASSWORD_REQUIRE_LOWERCASE=true
      - PASSWORD_REQUIRE_DIGITS=true
      - PASSWORD_REQUIRE_SPECIAL=true
      
      # Debug
      - DEBUG=true
      - LOG_LEVEL=INFO
      
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      args:
        - VITE_API_BASE=http://localhost:8000/api
        - VITE_USE_MOCKS=false
    ports:
      - "3000:8080"
    depends_on:
      api:
        condition: service_healthy

volumes:
  postgres_data:
  qdrant_data:
  minio_data: