#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–∑ HuggingFace
"""
import subprocess
import sys
import argparse
from pathlib import Path

def run_command(cmd):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True)
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        return False, e.stderr

def main():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ HuggingFace"""
    
    parser = argparse.ArgumentParser(description="–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–∑ HuggingFace")
    parser.add_argument("model_id", help="ID –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: BAAI/bge-3m)")
    parser.add_argument("--test", action="store_true", help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∞—á–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å")
    parser.add_argument("--info", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏")
    parser.add_argument("--include", nargs="+", help="–í–∫–ª—é—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç–∏ —Ñ–∞–π–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: *.safetensors)")
    parser.add_argument("--exclude", nargs="+", help="–ò—Å–∫–ª—é—á–∏—Ç—å —ç—Ç–∏ —Ñ–∞–π–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: *.bin)")
    parser.add_argument("--revision", "-r", help="–†–µ–≤–∏–∑–∏—è –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: main)")
    
    args = parser.parse_args()
    
    print(f"üöÄ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {args.model_id}")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
    if args.info:
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏...")
        info_cmd = f"python3 scripts/download_models.py {args.model_id} --info"
        success, output = run_command(info_cmd)
        if success:
            print(output)
        else:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {output}")
    
    print(f"\nüíæ –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {Path('models').absolute()}")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input(f"\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ? (y/N): ").strip().lower()
    if response not in ['y', 'yes', '–¥–∞']:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    print(f"\nüì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    cmd_parts = [
        "python3 scripts/download_models.py",
        args.model_id
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
    if args.test:
        cmd_parts.append("--test")
    
    if args.include:
        cmd_parts.extend(["--include"] + args.include)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ safetensors –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        cmd_parts.extend(["--include", "*.safetensors"])
    
    if args.exclude:
        cmd_parts.extend(["--exclude"] + args.exclude)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–∫–ª—é—á–∞–µ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
        cmd_parts.extend(["--exclude", "*.bin", "*.h5", "*.onnx"])
    
    if args.revision:
        cmd_parts.extend(["--revision", args.revision])
    
    cmd = " ".join(cmd_parts)
    print(f"üîß –ö–æ–º–∞–Ω–¥–∞: {cmd}")
    print("-" * 40)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    success, output = run_command(cmd)
    
    if success:
        print(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞!")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ä–∞–∑–º–µ—Ä –∏–∑ –≤—ã–≤–æ–¥–∞
        for line in output.split('\n'):
            if '–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏:' in line:
                try:
                    size_str = line.split('–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏:')[1].strip()
                    size_mb = float(size_str.replace(' MB', ''))
                    print(f"üíæ –†–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
                except:
                    pass
        
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ models/")
        print(f"\nüí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print(f"   make list-models  # –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–∞—á–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        print(f"   make demo-embedding  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        print(f"\nüîß –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:")
        print(f"   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –º–æ–¥–µ–ª—å –≤ MinIO:")
        print(f"      aws s3 cp models/{args.model_id.replace('/', '--')}/ s3://models/{args.model_id}/default/ --recursive")
        print(f"   2. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ docker-compose:")
        print(f"      - EMB_MODEL_ID={args.model_id}")
        print(f"      - EMB_MODEL_ALIAS=your_alias")
        print(f"      - EMB_MODEL_REV=default")
        
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {output}")
        print(f"\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print(f"   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –º–æ–¥–µ–ª–∏")
        print(f"   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print(f"   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install huggingface_hub transformers torch")

if __name__ == "__main__":
    main()
