#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –æ–¥–∏–Ω txt —Ñ–∞–π–ª
–†–∞–∑–¥–µ–ª—è–µ—Ç –∫–æ–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ç–µ—Å—Ç—ã, –±—ç–∫–µ–Ω–¥, —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
"""

import os
import glob
from pathlib import Path
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π
PROJECT_ROOT = Path(__file__).parent.parent
OUTPUT_DIR = PROJECT_ROOT / "docs" / "generated"
OUTPUT_FILE = OUTPUT_DIR / "full_code.txt"

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CODE_EXTENSIONS = {
    'python': ['.py'],
    'javascript': ['.js', '.jsx', '.ts', '.tsx'],
    'html': ['.html', '.htm'],
    'css': ['.css', '.scss', '.sass'],
    'json': ['.json'],
    'yaml': ['.yml', '.yaml'],
    'docker': ['Dockerfile', 'docker-compose.yml', 'docker-compose.yaml'],
    'makefile': ['Makefile'],
    'shell': ['.sh', '.bash'],
    'sql': ['.sql'],
    'markdown': ['.md']
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–¥–∞
CATEGORIES = {
    'infrastructure': {
        'paths': ['infra/', 'docker-compose*.yml', 'Dockerfile*', 'Makefile'],
        'description': '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'
    },
    'tests': {
        'paths': ['apps/*/tests/', 'tests/'],
        'description': '–¢–µ—Å—Ç—ã'
    },
    'backend': {
        'paths': ['apps/api/', 'apps/backend/'],
        'description': '–ë—ç–∫–µ–Ω–¥ API'
    },
    'frontend': {
        'paths': ['apps/frontend/', 'apps/web/'],
        'description': '–§—Ä–æ–Ω—Ç–µ–Ω–¥'
    },
    'models': {
        'paths': ['models/'],
        'description': '–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö'
    },
    'docs': {
        'paths': ['docs/'],
        'description': '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'
    },
    'scripts': {
        'paths': ['scripts/'],
        'description': '–°–∫—Ä–∏–ø—Ç—ã'
    }
}

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è (—Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å)
EXCLUDE_PATTERNS = [
    '__pycache__',
    '.git',
    '.pytest_cache',
    'node_modules',
    '.venv',
    'venv',
    '.env',
    '*.pyc',
    '.DS_Store',
    '*.log',
    '*.tmp',
    '*.swp',
    '*.swo',
    '.coverage',
    'htmlcov',
    '.mypy_cache',
    '.tox',
    'dist',
    'build',
    '*.egg-info',
    '.idea',
    '.vscode',
    'generated'  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫—É generated
]

def should_exclude(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É"""
    path_str = str(file_path)
    for pattern in EXCLUDE_PATTERNS:
        if pattern in path_str:
            return True
    return False

def get_file_type(file_path):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
    suffix = file_path.suffix.lower()
    name = file_path.name.lower()
    
    for file_type, extensions in CODE_EXTENSIONS.items():
        if suffix in extensions or name in extensions:
            return file_type
    return 'other'

def collect_files(category_paths):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    files = []
    
    for path_pattern in category_paths:
        if '*' in path_pattern:
            # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            matches = glob.glob(str(PROJECT_ROOT / path_pattern), recursive=True)
            for match in matches:
                path = Path(match)
                if path.is_file() and not should_exclude(path):
                    files.append(path)
        else:
            # –û–±—ã—á–Ω—ã–π –ø—É—Ç—å
            full_path = PROJECT_ROOT / path_pattern
            if full_path.exists():
                if full_path.is_file() and not should_exclude(full_path):
                    files.append(full_path)
                elif full_path.is_dir():
                    for file_path in full_path.rglob('*'):
                        if file_path.is_file() and not should_exclude(file_path):
                            files.append(file_path)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    files = sorted(list(set(files)))
    return files

def read_file_content(file_path):
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except UnicodeDecodeError:
        try:
            with open(file_path, 'r', encoding='latin-1') as f:
                return f.read()
        except Exception:
            return f"[–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {file_path}]"
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {str(e)}]"

def generate_code_file():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º –∫–æ–¥–æ–º –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if OUTPUT_FILE.exists():
        print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {OUTPUT_FILE}")
        OUTPUT_FILE.unlink()
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_files = 0
    total_lines = 0
    
    with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        f.write("=" * 80 + "\n")
        f.write("–ü–û–õ–ù–´–ô –ö–û–î –ü–†–û–ï–ö–¢–ê ML PORTAL\n")
        f.write("=" * 80 + "\n")
        f.write(f"–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"–ü—Ä–æ–µ–∫—Ç: {PROJECT_ROOT.name}\n")
        f.write("=" * 80 + "\n\n")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        for category_name, category_info in CATEGORIES.items():
            print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_info['description']}")
            
            files = collect_files(category_info['paths'])
            
            if not files:
                print(f"   ‚ö†Ô∏è  –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name}")
                continue
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            f.write("\n" + "=" * 80 + "\n")
            f.write(f"–ö–ê–¢–ï–ì–û–†–ò–Ø: {category_info['description'].upper()}\n")
            f.write("=" * 80 + "\n")
            f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {len(files)}\n")
            f.write("=" * 80 + "\n\n")
            
            category_files = 0
            category_lines = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for file_path in files:
                relative_path = file_path.relative_to(PROJECT_ROOT)
                file_type = get_file_type(file_path)
                
                print(f"   üìÑ {relative_path}")
                
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
                f.write(f"\n{'‚îÄ' * 60}\n")
                f.write(f"–§–ê–ô–õ: {relative_path}\n")
                f.write(f"–¢–ò–ü: {file_type}\n")
                f.write(f"–†–ê–ó–ú–ï–†: {file_path.stat().st_size} –±–∞–π—Ç\n")
                f.write(f"{'‚îÄ' * 60}\n\n")
                
                # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                content = read_file_content(file_path)
                f.write(content)
                
                if not content.endswith('\n'):
                    f.write('\n')
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                lines = content.count('\n')
                category_files += 1
                category_lines += lines
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            f.write(f"\n{'‚îÄ' * 60}\n")
            f.write(f"–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ò '{category_info['description']}':\n")
            f.write(f"–§–∞–π–ª–æ–≤: {category_files}\n")
            f.write(f"–°—Ç—Ä–æ–∫: {category_lines}\n")
            f.write(f"{'‚îÄ' * 60}\n")
            
            total_files += category_files
            total_lines += category_lines
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        f.write(f"\n{'=' * 80}\n")
        f.write("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê\n")
        f.write(f"{'=' * 80}\n")
        f.write(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n")
        f.write(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {total_lines}\n")
        f.write(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {OUTPUT_FILE.stat().st_size} –±–∞–π—Ç\n")
        f.write(f"{'=' * 80}\n")
    
    print(f"\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÑ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {OUTPUT_FILE}")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –§–∞–π–ª–æ–≤: {total_files}")
    print(f"   - –°—Ç—Ä–æ–∫: {total_lines}")
    print(f"   - –†–∞–∑–º–µ—Ä: {OUTPUT_FILE.stat().st_size} –±–∞–π—Ç")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        generate_code_file()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        raise

if __name__ == "__main__":
    main()
