version: "3.9"

networks:
  public:
    driver: overlay
  internal:
    driver: overlay

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks: [internal]

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks: [internal]

  qdrant:
    image: qdrant/qdrant:latest
    volumes:
      - qdrant_data:/qdrant/storage
    networks: [internal]

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: miniouser
      MINIO_ROOT_PASSWORD: miniopassword
    volumes:
      - minio_data:/data
    networks: [internal]

  api:
    image: ${IMAGE_API:-llm_api}:${TAG:-dev}
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    environment:
      DB_URL: "postgresql://postgres:postgres@postgres:5432/app"
      REDIS_URL: "redis://redis:6379/0"
      QDRANT_URL: "http://qdrant:6333"
      S3_ENDPOINT: "http://minio:9000"
      S3_PUBLIC_ENDPOINT: "${S3_PUBLIC_ENDPOINT:-https://10.4.4.2}"
      S3_BUCKET_RAG: "rag"
      S3_BUCKET_ANALYSIS: "analysis"
      JWT_SECRET: "${JWT_SECRET:-please_change_me}"
    deploy:
      replicas: 1
      restart_policy: {condition: on-failure}
    ports:
      - target: 8000
        published: 8000
        protocol: tcp
        mode: ingress
    networks: [public, internal]
    depends_on: [postgres, redis, qdrant, minio]

  worker:
    image: ${IMAGE_WORKER:-llm_worker}:${TAG:-dev}
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    environment:
      DB_URL: "postgresql://postgres:postgres@postgres:5432/app"
      REDIS_URL: "redis://redis:6379/0"
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/1"
      QDRANT_URL: "http://qdrant:6333"
      S3_ENDPOINT: "http://minio:9000"
      S3_PUBLIC_ENDPOINT: "${S3_PUBLIC_ENDPOINT:-https://10.4.4.2}"
      S3_BUCKET_RAG: "rag"
      S3_BUCKET_ANALYSIS: "analysis"
    command: ["bash","-lc","celery -A app.celery_app:app worker -l info -Q normalize,chunk,embed,index,analyze"]
    deploy:
      replicas: 1
      restart_policy: {condition: on-failure}
    networks: [internal]

  beat:
    image: ${IMAGE_WORKER:-llm_worker}:${TAG:-dev}
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    environment:
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/1"
    command: ["bash","-lc","celery -A app.celery_app:app beat -l info"]
    deploy:
      replicas: 1
      restart_policy: {condition: on-failure}
    networks: [internal]

volumes:
  qdrant_data: {}
  redis_data: {}
  minio_data: {}
  pg_data: {}
