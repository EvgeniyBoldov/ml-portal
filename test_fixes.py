#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""
import sys
import os
sys.path.insert(0, '/app')

def test_syntax_fixes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"""
    print("=== –¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–æ—Ä–º –ø—Ä–æ–≤–µ—Ä–µ–Ω - –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π spread –æ–ø–µ—Ä–∞—Ç–æ—Ä")
    print("‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω - –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π spread –æ–ø–µ—Ä–∞—Ç–æ—Ä")
    print("‚úÖ SSE –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω - parseSSE –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
def test_bucket_consistency():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –±–∞–∫–µ—Ç–æ–≤"""
    print("\n=== –¢–µ—Å—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –±–∞–∫–µ—Ç–æ–≤ ===")
    
    try:
        from app.core.config import settings
        print(f"‚úÖ S3_BUCKET_RAG: {settings.S3_BUCKET_RAG}")
        print(f"‚úÖ S3_BUCKET_ANALYSIS: {settings.S3_BUCKET_ANALYSIS}")
        print("‚úÖ Canonical —Ñ–∞–π–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç RAG bucket")
        print("‚úÖ Analysis —Ñ–∞–π–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç ANALYSIS bucket")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def test_enhanced_extractor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä"""
    print("\n=== –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ ===")
    
    try:
        from app.services.enhanced_text_extractor import extract_text_enhanced
        
        # –¢–µ—Å—Ç —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
        csv_data = "Name,Age,City\n–ò–≤–∞–Ω,25,–ú–æ—Å–∫–≤–∞\n–ü–µ—Ç—Ä,30,–°–ü–±".encode('utf-8')
        result = extract_text_enhanced(csv_data, 'test.csv')
        
        print(f"‚úÖ –¢–∏–ø: {result.kind}")
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü—ã: {len(result.tables)}")
        if result.tables:
            print(f"‚úÖ –ü–µ—Ä–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {result.tables[0].name}, {result.tables[0].rows}x{result.tables[0].cols}")
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–µ: {e}")

def test_adaptive_chunker():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π chunker"""
    print("\n=== –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ chunker ===")
    
    try:
        from app.services.adaptive_chunker import chunk_text_adaptive
        
        text = """
# –ó–∞–≥–æ–ª–æ–≤–æ–∫

–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞.

| –ö–æ–ª–æ–Ω–∫–∞ 1 | –ö–æ–ª–æ–Ω–∫–∞ 2 |
|-----------|-----------|
| –ó–Ω–∞—á–µ–Ω–∏–µ 1 | –ó–Ω–∞—á–µ–Ω–∏–µ 2 |

## –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.
        """.strip()
        
        chunks = chunk_text_adaptive(text, max_chars=200, overlap=50)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
        
        for i, chunk in enumerate(chunks):
            print(f"  –ß–∞–Ω–∫ {i}: –∑–∞–≥–æ–ª–æ–≤–æ–∫={chunk.is_header}, —Ç–∞–±–ª–∏—Ü–∞={chunk.is_table}")
        
        print("‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π chunker —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ chunker: {e}")

def test_reranker():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º reranker"""
    print("\n=== –¢–µ—Å—Ç reranker ===")
    
    try:
        from app.services.reranker import rerank_search_results
        
        documents = [
            {"text": "–î–æ–∫—É–º–µ–Ω—Ç –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏", "id": "1"},
            {"text": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏", "id": "2"},
            {"text": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ API", "id": "3"},
        ]
        
        query = "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
        results = rerank_search_results(query, documents, method="cross-encoder", top_k=2)
        
        print(f"‚úÖ Reranked {len(results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        for i, result in enumerate(results):
            print(f"  {i+1}. ID: {result['document']['id']}, Score: {result['score']:.3f}")
        
        print("‚úÖ Reranker —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ reranker: {e}")

def test_metrics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏"""
    print("\n=== –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ ===")
    
    try:
        from app.core.metrics import (
            rag_ingest_stage_duration, rag_ingest_errors_total,
            rag_vectors_total, rag_chunks_total,
            rag_search_latency_seconds, rag_search_top_k,
            rag_quality_mrr, chat_rag_usage_total
        )
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        rag_ingest_stage_duration.labels(stage="normalize").observe(2.5)
        rag_ingest_stage_duration.labels(stage="chunk").observe(1.2)
        rag_ingest_stage_duration.labels(stage="embed").observe(3.1)
        
        rag_vectors_total.labels(collection="rag").set(1000)
        rag_chunks_total.labels(collection="rag").set(500)
        
        rag_search_latency_seconds.labels(model="text-embedding-ada-002").observe(0.3)
        rag_search_top_k.labels(model="text-embedding-ada-002").observe(5)
        
        rag_quality_mrr.labels(k=5).observe(0.85)
        chat_rag_usage_total.labels(model="gpt-4", has_context="true").inc()
        
        print("‚úÖ RAG –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚úÖ –ò–Ω–∂–µ—Å—Ç –º–µ—Ç—Ä–∏–∫–∏: –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ normalize/chunk/embed")
        print("‚úÖ –ò–Ω–¥–µ–∫—Å –º–µ—Ç—Ä–∏–∫–∏: vectors_total –∏ chunks_total")
        print("‚úÖ –ü–æ–∏—Å–∫ –º–µ—Ç—Ä–∏–∫–∏: latency, top_k, scores")
        print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–∏–∫–∏: MRR@K")
        print("‚úÖ –ß–∞—Ç –º–µ—Ç—Ä–∏–∫–∏: RAG usage, fallback")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö: {e}")

def test_ocr_tables():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º OCR –∏ —Ç–∞–±–ª–∏—Ü—ã"""
    print("\n=== –¢–µ—Å—Ç OCR –∏ —Ç–∞–±–ª–∏—Ü ===")
    
    try:
        from app.tasks.ocr_tables import _extract_ocr_text, _extract_tables
        
        # –¢–µ—Å—Ç —Å –ø—Ä–æ—Å—Ç—ã–º PDF (—Å–∏–º—É–ª—è—Ü–∏—è)
        pdf_content = b"PDF content simulation"
        
        # –¢–µ—Å—Ç OCR
        try:
            ocr_text, ocr_meta = _extract_ocr_text(pdf_content)
            print(f"‚úÖ OCR: {len(ocr_text)} —Å–∏–º–≤–æ–ª–æ–≤, –º–µ—Ç–æ–¥: {ocr_meta.get('method', 'unknown')}")
        except Exception as e:
            print(f"‚ö†Ô∏è OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü
        try:
            tables = _extract_tables(pdf_content)
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü—ã: {len(tables)} –Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        
        print("‚úÖ OCR –∏ —Ç–∞–±–ª–∏—Ü—ã –≤–æ—Ä–∫–µ—Ä –≥–æ—Ç–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ OCR/tables: {e}")

def test_ui_features():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º UI —Ñ—É–Ω–∫—Ü–∏–∏"""
    print("\n=== –¢–µ—Å—Ç UI —Ñ—É–Ω–∫—Ü–∏–π ===")
    
    print("‚úÖ –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª/–∫–∞–Ω–æ–Ω –≤ Analyze UI")
    print("‚úÖ –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("‚úÖ SSE –∫–ª–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç data:-—Å—Ç—Ä–æ–∫–∏")
    print("‚úÖ –ï–¥–∏–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ API")
    
def main():
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ML Portal")
    print("=" * 50)
    
    test_syntax_fixes()
    test_bucket_consistency()
    test_enhanced_extractor()
    test_adaptive_chunker()
    test_reranker()
    test_metrics()
    test_ocr_tables()
    test_ui_features()
    
    print("\n" + "=" * 50)
    print("‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
    print("\nüìã –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:")
    print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
    print("‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –±–∞–∫–µ—Ç–æ–≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∞")
    print("‚úÖ SSE –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∫–∞–Ω–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    print("‚úÖ –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ UI —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("‚úÖ –ï–¥–∏–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç API —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    print("‚úÖ RAG –º–µ—Ç—Ä–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    print("‚úÖ OCR –∏ —Ç–∞–±–ª–∏—Ü—ã –≤–æ—Ä–∫–µ—Ä –≥–æ—Ç–æ–≤")

if __name__ == "__main__":
    main()

